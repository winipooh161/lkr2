/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–º–µ—Ç
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 * 
 * @version 1.0
 */

console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –≠–ö–°–ü–û–†–¢–ê –°–ú–ï–¢ - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ is_header');
console.log('=' .repeat(80));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–º–µ—Ç—ã
function analyzeEstimateData() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
    if (typeof window.estimateData !== 'undefined') {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–º–µ—Ç—ã –≤ window.estimateData');
        analyzeSectionsData(window.estimateData);
    } else {
        console.log('‚ö†Ô∏è window.estimateData –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ...');
        loadEstimateDataForAnalysis();
    }
}

// –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–∞–∑–¥–µ–ª–æ–≤
function analyzeSectionsData(data) {
    console.log('üìä –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–•:');
    console.log('------------------------------');
    
    if (data.sections && Array.isArray(data.sections)) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–∞–∑–¥–µ–ª–æ–≤: ${data.sections.length}`);
        
        data.sections.forEach((section, index) => {
            console.log(`\nüìÅ –†–∞–∑–¥–µ–ª ${index + 1}: "${section.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}"`);
            console.log(`   ID: ${section.id || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
            console.log(`   –¢–∏–ø: ${section.type || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
            
            if (section.items && Array.isArray(section.items)) {
                console.log(`   üìù –≠–ª–µ–º–µ–Ω—Ç–æ–≤: ${section.items.length}`);
                
                section.items.forEach((item, itemIndex) => {
                    const hasIsHeader = 'is_header' in item;
                    const isHeaderValue = item.is_header;
                    const shouldBeIncluded = !hasIsHeader || isHeaderValue === false;
                    
                    console.log(`      ${itemIndex + 1}. "${item.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}"`);
                    console.log(`         üìã has_is_header: ${hasIsHeader}`);
                    console.log(`         üìã is_header: ${isHeaderValue}`);
                    console.log(`         üìã will_be_exported: ${shouldBeIncluded ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
                    
                    if (!shouldBeIncluded) {
                        console.log(`         ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –≠—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç –ù–ï –±—É–¥–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!`);
                    }
                });
            } else {
                console.log(`   ‚ùå –ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ`);
            }
        });
    } else {
        console.log('‚ùå –†–∞–∑–¥–µ–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö');
    }
    
    console.log('\n' + '=' .repeat(80));
    console.log('üéØ –†–ï–ó–Æ–ú–ï –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:');
    
    const problemItems = [];
    if (data.sections) {
        data.sections.forEach((section, sectionIndex) => {
            if (section.items) {
                section.items.forEach((item, itemIndex) => {
                    const hasIsHeader = 'is_header' in item;
                    const isHeaderValue = item.is_header;
                    const shouldBeIncluded = !hasIsHeader || isHeaderValue === false;
                    
                    if (!shouldBeIncluded) {
                        problemItems.push({
                            section: section.title,
                            item: item.name,
                            is_header: isHeaderValue
                        });
                    }
                });
            }
        });
    }
    
    if (problemItems.length > 0) {
        console.log(`‚ùå –ù–∞–π–¥–µ–Ω–æ ${problemItems.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –±—É–¥—É—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã:`);
        problemItems.forEach(item => {
            console.log(`   - "${item.item}" –≤ —Ä–∞–∑–¥–µ–ª–µ "${item.section}" (is_header: ${item.is_header})`);
        });
        console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ EstimateJsonExportService.php');
        console.log('   –£—Å–ª–æ–≤–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å: (!isset($item["is_header"]) || $item["is_header"] === false)');
    } else {
        console.log('‚úÖ –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è!');
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
async function loadEstimateDataForAnalysis() {
    try {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID —Å–º–µ—Ç—ã –∏–∑ URL
        const urlParts = window.location.pathname.split('/');
        const estimateIdIndex = urlParts.findIndex(part => part === 'estimates') + 1;
        const estimateId = urlParts[estimateIdIndex];
        
        if (!estimateId) {
            console.log('‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID —Å–º–µ—Ç—ã –∏–∑ URL');
            return;
        }
        
        console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–º–µ—Ç—ã ID: ${estimateId}`);
        
        const response = await fetch(`/partner/estimates/${estimateId}/json-data`);
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
        }
        
        const data = await response.json();
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        analyzeSectionsData(data);
        
    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
        console.log('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ—Ç—ã');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞
function testExportUrls() {
    const urlParts = window.location.pathname.split('/');
    const estimateIdIndex = urlParts.findIndex(part => part === 'estimates') + 1;
    const estimateId = urlParts[estimateIdIndex];
    
    if (!estimateId) {
        console.log('‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID —Å–º–µ—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
        return;
    }
    
    console.log('\nüöÄ –°–°–´–õ–ö–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –≠–ö–°–ü–û–†–¢–ê:');
    console.log('=====================================');
    console.log(`üìä Excel –ø–æ–ª–Ω—ã–π: /partner/estimates/${estimateId}/export`);
    console.log(`üìä Excel –∫–ª–∏–µ–Ω—Ç: /partner/estimates/${estimateId}/export-client`);
    console.log(`üìä Excel –º–∞—Å—Ç–µ—Ä: /partner/estimates/${estimateId}/export-contractor`);
    console.log(`üìÑ PDF –ø–æ–ª–Ω—ã–π: /partner/estimates/${estimateId}/export-pdf`);
    console.log(`üìÑ PDF –∫–ª–∏–µ–Ω—Ç: /partner/estimates/${estimateId}/export-pdf-client`);
    console.log(`üìÑ PDF –º–∞—Å—Ç–µ—Ä: /partner/estimates/${estimateId}/export-pdf-contractor`);
    console.log('\nüí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫–∏ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
document.addEventListener('DOMContentLoaded', function() {
    console.log('üîß –ú–æ–¥—É–ª—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω');
    
    // –î–∞–µ–º –≤—Ä–µ–º—è –¥—Ä—É–≥–∏–º —Å–∫—Ä–∏–ø—Ç–∞–º –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
    setTimeout(() => {
        analyzeEstimateData();
        testExportUrls();
    }, 1000);
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
window.debugExportFix = {
    analyze: analyzeEstimateData,
    testUrls: testExportUrls
};

console.log('üõ†Ô∏è –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:');
console.log('   window.debugExportFix.analyze() - –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö');
console.log('   window.debugExportFix.testUrls() - —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
