/**
 * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—á–∏ –¥–ª—è EstimateEditor
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—á–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫
 * –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –≤ –∫–ª–∞—Å—Å EstimateEditor
 */

document.addEventListener('DOMContentLoaded', function() {
    console.log('üõ†Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—á–µ–π –¥–ª—è EstimateEditor...');
    
    // –ñ–¥–µ–º, –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –∫–ª–∞—Å—Å EstimateEditor
    function checkForEstimateEditor() {
        if (typeof EstimateEditor !== 'undefined') {
            applyPatches();
        } else {
            setTimeout(checkForEstimateEditor, 100);
        }
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á–∏ –∫ –∫–ª–∞—Å—Å—É EstimateEditor
    function applyPatches() {
        console.log('üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ç—á–µ–π –∫ –º–µ—Ç–æ–¥–∞–º EstimateEditor');
        
        // –ü–∞—Ç—á –¥–ª—è –º–µ—Ç–æ–¥–∞ init
        const originalInit = EstimateEditor.prototype.init;
        
        EstimateEditor.prototype.init = function() {
            console.log('üîÑ –í—ã–∑–æ–≤ –ø–∞—Ç—á–∞ –º–µ—Ç–æ–¥–∞ init');
            
            console.log('üìä –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞:', {
                data: this.data ? '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
                options: this.options ? '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
                containerId: this.containerId
            });
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º this.data –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            if (!this.data) {
                console.warn('‚ö†Ô∏è this.data –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É');
                this.data = {
                    sheets: [{ data: [] }],
                    currentSheet: 0,
                    sections: [],
                    totals: {}
                };
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º this.options –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            if (!this.options) {
                console.warn('‚ö†Ô∏è this.options –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç');
                this.options = {};
            }
            
            // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            const result = originalInit ? originalInit.call(this) : Promise.resolve();
            
            console.log('‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π init –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);
            
            return result;
        };
        
        console.log('‚úÖ –ü–∞—Ç—á –¥–ª—è –º–µ—Ç–æ–¥–∞ init —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ validateCell, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if (!EstimateEditor.prototype.validateCell) {
            EstimateEditor.prototype.validateCell = function(rowIndex, columnIndex, value) {
                console.log('üîÑ –í—ã–∑–æ–≤ –ø–∞—Ç—á–∞ –º–µ—Ç–æ–¥–∞ validateCell');
                
                // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ undefined –∏ –Ω–µ null
                if (value === undefined || value === null) {
                    return false;
                }
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–ª–æ–Ω–∫–∏
                if (typeof value === 'string') {
                    return value.trim().length > 0;
                }
                
                if (typeof value === 'number') {
                    return !isNaN(value) && isFinite(value);
                }
                
                return true;
            };
            
            console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥ validateCell');
        }
        
        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ calculateFormula –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–æ–∫ —Å client_price
        const originalCalculateFormula = EstimateEditor.prototype.calculateFormula;
        
        if (originalCalculateFormula) {
            EstimateEditor.prototype.calculateFormula = function(formula, row, rowIndex) {
                try {
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    if (!formula || typeof formula !== 'string') {
                        return 0;
                    }
                    
                    if (!row || typeof row !== 'object') {
                        console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ calculateFormula');
                        return 0;
                    }
                    
                    // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞—â–∏—Ç–æ–π
                    return originalCalculateFormula.call(this, formula, row, rowIndex) || 0;
                    
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ calculateFormula:', error);
                    return 0;
                }
            };
            
            console.log('‚úÖ –ü–∞—Ç—á –¥–ª—è –º–µ—Ç–æ–¥–∞ calculateFormula —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω');
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ calculateTotals —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
        if (!EstimateEditor.prototype.calculateTotals) {
            EstimateEditor.prototype.calculateTotals = function() {
                console.log('üìä –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤ —Å–º–µ—Ç—ã');
                
                try {
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
                    if (!this.data || !this.data.sheets) {
                        console.warn('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ calculateTotals');
                        return { work: 0, materials: 0, total: 0, clientWork: 0, clientMaterials: 0, clientTotal: 0 };
                    }
                    
                    const currentSheet = this.data.currentSheet || 0;
                    const sheetData = this.data.sheets[currentSheet]?.data || [];
                    
                    let workTotal = 0;
                    let materialsTotal = 0;
                    let clientWorkTotal = 0;
                    let clientMaterialsTotal = 0;
                    
                    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                    for (const row of sheetData) {
                        if (!row || typeof row !== 'object') continue;
                        
                        try {
                            // –ü–∞—Ä—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç–∞
                            let clientPrice = 0;
                            if (row.client_price !== undefined) {
                                clientPrice = parseFloat(row.client_price);
                                if (isNaN(clientPrice)) clientPrice = 0;
                            } else {
                                // –ï—Å–ª–∏ client_price –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –µ–≥–æ
                                const price = parseFloat(row.price) || 0;
                                const markup = parseFloat(row.markup) || 0;
                                const discount = parseFloat(row.discount) || 0;
                                clientPrice = price * (1 + markup/100) * (1 - discount/100);
                            }
                            
                            // –ü–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                            const quantity = parseFloat(row.quantity) || 0;
                            
                            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
                            let clientCost = 0;
                            if (row.client_cost !== undefined) {
                                clientCost = parseFloat(row.client_cost);
                                if (isNaN(clientCost)) clientCost = 0;
                            } else {
                                clientCost = quantity * clientPrice;
                            }
                            
                            // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è
                            let isMaterial = false;
                            if (row.name && typeof row.name === 'string') {
                                const name = row.name.toLowerCase();
                                isMaterial = name.includes('–º–∞—Ç–µ—Ä–∏–∞–ª') || 
                                           name.includes('–∫—Ä–∞—Å–∫–∞') || 
                                           name.includes('–ø–ª–∏—Ç–∫–∞') ||
                                           name.includes('–æ–±–æ–∏');
                            }
                            
                            if (isMaterial) {
                                materialsTotal += parseFloat(row.cost) || 0;
                                clientMaterialsTotal += clientCost;
                            } else {
                                workTotal += parseFloat(row.cost) || 0;
                                clientWorkTotal += clientCost;
                            }
                            
                        } catch (rowError) {
                            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ –≤ calculateTotals:', rowError);
                        }
                    }
                    
                    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –∏—Ç–æ–≥–∏
                    const total = workTotal + materialsTotal;
                    const clientTotal = clientWorkTotal + clientMaterialsTotal;
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–∏ –≤ –¥–∞–Ω–Ω—ã—Ö
                    if (!this.data.totals) {
                        this.data.totals = {};
                    }
                    
                    this.data.totals = {
                        work_total: workTotal,
                        materials_total: materialsTotal,
                        grand_total: total,
                        client_work_total: clientWorkTotal,
                        client_materials_total: clientMaterialsTotal,
                        client_grand_total: clientTotal
                    };
                    
                    const result = {
                        work: workTotal,
                        materials: materialsTotal,
                        total: total,
                        clientWork: clientWorkTotal,
                        clientMaterials: clientMaterialsTotal,
                        clientTotal: clientTotal
                    };
                    
                    console.log('‚úÖ –ò—Ç–æ–≥–∏ —Å–º–µ—Ç—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã', result);
                    return result;
                    
                } catch (error) {
                    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ calculateTotals:', error);
                    return { work: 0, materials: 0, total: 0, clientWork: 0, clientMaterials: 0, clientTotal: 0 };
                }
            };
            
            console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥ calculateTotals —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–∞–Ω–Ω—ã—Ö');
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ saveData –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        if (!EstimateEditor.prototype.saveData) {
            EstimateEditor.prototype.saveData = function() {
                console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–º–µ—Ç—ã...');
                
                try {
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
                    if (!this.data) {
                        console.warn('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ');
                        return Promise.reject(new Error('–î–∞–Ω–Ω—ã–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã'));
                    }
                    
                    // –ü–æ–ª—É—á–∞–µ–º ID —Å–º–µ—Ç—ã –∏–∑ options –∏–ª–∏ –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                    let estimateId = this.options?.estimateId;
                    if (!estimateId) {
                        const container = document.getElementById(this.containerId);
                        estimateId = container?.dataset?.estimateId;
                    }
                    
                    if (!estimateId) {
                        console.warn('‚ö†Ô∏è ID —Å–º–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ');
                        return Promise.reject(new Error('ID —Å–º–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω'));
                    }
                    
                    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    const saveData = {
                        ...this.data,
                        meta: {
                            ...this.data.meta,
                            updated_at: new Date().toISOString(),
                            estimate_id: parseInt(estimateId)
                        }
                    };
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º AJAX –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    return fetch(`/partner/estimates/${estimateId}/save-json-data`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || ''
                        },
                        body: JSON.stringify(saveData)
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', data);
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
                        if (window.showNotification) {
                            window.showNotification('success', '–°–º–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
                        } else if (window.Toastify) {
                            window.Toastify({
                                text: "–°–º–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞",
                                duration: 3000,
                                gravity: "top",
                                position: "right",
                                backgroundColor: "#28a745",
                            }).showToast();
                        } else {
                            alert('–°–º–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
                        }
                        
                        return data;
                    })
                    .catch(error => {
                        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                        if (window.showNotification) {
                            window.showNotification('error', '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + error.message);
                        } else if (window.Toastify) {
                            window.Toastify({
                                text: "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: " + error.message,
                                duration: 5000,
                                gravity: "top",
                                position: "right",
                                backgroundColor: "#dc3545",
                            }).showToast();
                        } else {
                            alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + error.message);
                        }
                        
                        throw error;
                    });
                    
                } catch (error) {
                    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ saveData:', error);
                    return Promise.reject(error);
                }
            };
            
            console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥ saveData');
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ calculateClientPrice
        if (!EstimateEditor.prototype.calculateClientPrice) {
            EstimateEditor.prototype.calculateClientPrice = function(row) {
                const price = parseFloat(row.price) || 0;
                const markup = parseFloat(row.markup) || 0;
                const discount = parseFloat(row.discount) || 0;
                
                return price * (1 + markup/100) * (1 - discount/100);
            };
            
            console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥ calculateClientPrice');
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ applyFormulas –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if (!EstimateEditor.prototype.applyFormulas) {
            EstimateEditor.prototype.applyFormulas = function() {
                // –í—ã–∑—ã–≤–∞–µ–º calculateTotals –≤–º–µ—Å—Ç–æ applyFormulas
                if (typeof this.calculateTotals === 'function') {
                    return this.calculateTotals();
                }
                return {};
            };
            
            console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ applyFormulas');
        }
        
        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ onCellChange –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
        const originalOnCellChange = EstimateEditor.prototype.onCellChange;
        
        if (originalOnCellChange) {
            EstimateEditor.prototype.onCellChange = function(rowIndex, columnIndex, value) {
                try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç - —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è, –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    if (typeof rowIndex === 'object' && rowIndex !== null) {
                        console.log('üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è –≤ onCellChange, –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ');
                        
                        // –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–±—ã—Ç–∏—è
                        if (rowIndex.target && rowIndex.target.dataset) {
                            const target = rowIndex.target;
                            const newRowIndex = parseInt(target.dataset.row);
                            const newColumnIndex = parseInt(target.dataset.column);
                            const newValue = target.value || '';
                            
                            if (!isNaN(newRowIndex) && !isNaN(newColumnIndex)) {
                                rowIndex = newRowIndex;
                                columnIndex = newColumnIndex;
                                value = newValue;
                            } else {
                                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –∏–∑ —Å–æ–±—ã—Ç–∏—è');
                                return;
                            }
                        } else {
                            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–±—ã—Ç–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É');
                            return;
                        }
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
                    if (!this.data || !this.data.sheets) {
                        console.warn('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ onCellChange');
                        return;
                    }
                    
                    // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥, –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—è –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
                    try {
                        if (typeof rowIndex === 'number' && typeof columnIndex === 'number') {
                            originalOnCellChange.call(this, rowIndex, columnIndex, value);
                        }
                    } catch (error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ onCellChange:', error);
                    }
                    
                    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                    const currentSheet = this.data.currentSheet || 0;
                    
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ª–∏—Å—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
                    if (!this.data.sheets[currentSheet]) {
                        console.warn('‚ö†Ô∏è –õ–∏—Å—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ onCellChange');
                        return;
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –ª–∏—Å—Ç–∞
                    const sheetData = this.data.sheets[currentSheet].data;
                    if (!sheetData || !Array.isArray(sheetData)) {
                        console.warn('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –ª–∏—Å—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º –≤ onCellChange');
                        return;
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–æ–∫–∏
                    if (rowIndex < 0 || rowIndex >= sheetData.length) {
                        console.warn(`‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ ${rowIndex} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤ onCellChange`);
                        return;
                    }
                    
                    const row = sheetData[rowIndex];
                    if (!row) {
                        console.warn(`‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ ${rowIndex} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ onCellChange`);
                        return;
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫–µ
                    const fieldMap = {
                        0: 'number',
                        1: 'name',
                        2: 'unit',
                        3: 'quantity',
                        4: 'price',
                        5: 'cost',
                        6: 'markup',
                        7: 'discount',
                        8: 'client_price',
                        9: 'client_cost'
                    };
                    
                    const updatedField = fieldMap[columnIndex] || 'unknown';
                    if (updatedField !== 'unknown') {
                        row[updatedField] = value;
                    }
                    
                    // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Ü–µ–Ω–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –Ω–∞—Ü–µ–Ω–∫–∞ –∏–ª–∏ —Å–∫–∏–¥–∫–∞ - –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
                    if (['price', 'quantity', 'markup', 'discount'].includes(updatedField)) {
                        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
                        const price = parseFloat(row.price) || 0;
                        const markup = parseFloat(row.markup) || 0;
                        const discount = parseFloat(row.discount) || 0;
                        const quantity = parseFloat(row.quantity) || 0;
                        
                        row.client_price = price * (1 + markup/100) * (1 - discount/100);
                        row.client_cost = quantity * row.client_price;
                        
                        console.log('üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã client_price –∏ client_cost –¥–ª—è —Å—Ç—Ä–æ–∫–∏', rowIndex);
                        
                        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
                        if (typeof this.calculateTotals === 'function') {
                            this.calculateTotals();
                        }
                        
                        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω
                        if (this.ui && typeof this.ui.updateRow === 'function') {
                            this.ui.updateRow(rowIndex);
                        }
                    }
                    
                    // –í—ã–∑—ã–≤–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    if (typeof this.saveData === 'function') {
                        setTimeout(() => {
                            this.saveData();
                        }, 1000); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    }
                    
                } catch (error) {
                    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–∞—Ç—á–µ onCellChange:', error);
                }
            };
            
            console.log('‚úÖ –ü–∞—Ç—á –¥–ª—è –º–µ—Ç–æ–¥–∞ onCellChange —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω');
        }
        
        // –ü–∞—Ç—á –¥–ª—è –º–µ—Ç–æ–¥–∞ loadEstimateData
        const originalLoadEstimateData = EstimateEditor.prototype.loadEstimateData;
        
        if (originalLoadEstimateData) {
            EstimateEditor.prototype.loadEstimateData = async function() {
                console.log('üîÑ –ó–∞–ø—É—Å–∫ –ø–∞—Ç—á–∞ –¥–ª—è –º–µ—Ç–æ–¥–∞ loadEstimateData');
                
                console.log('‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π:', {
                    hasSheets: this.data?.sheets ? true : false,
                    sheetsCount: this.data?.sheets?.length || 0,
                    currentSheet: this.data?.currentSheet
                });
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
                if (!this.data) {
                    this.data = {
                        sheets: [{ data: [] }],
                        currentSheet: 0,
                        sections: [],
                        totals: {}
                    };
                }
                
                console.log('üîÑ –í—ã–∑–æ–≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ loadEstimateData...');
                try {
                    const result = await originalLoadEstimateData.call(this);
                    console.log('‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π loadEstimateData –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                    
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                    if (!this.data.sheets || !Array.isArray(this.data.sheets)) {
                        console.warn('‚ö†Ô∏è this.data.sheets –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º');
                        this.data.sheets = [{ data: [] }];
                    }
                    
                    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤
                    if (this.data && this.data.sheets && this.data.sheets[0] && this.data.sheets[0].data) {
                        const sheetData = this.data.sheets[0].data;
                        console.log('üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–∞, —Å—Ç—Ä–æ–∫:', sheetData.length);
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫
                        for (let i = 0; i < sheetData.length; i++) {
                            const row = sheetData[i];
                            if (row && typeof row === 'object' && !row._type) {
                                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                                if (!row.hasOwnProperty('number')) row.number = i + 1;
                                if (!row.hasOwnProperty('cost')) {
                                    row.cost = (parseFloat(row.quantity) || 0) * (parseFloat(row.price) || 0);
                                }
                                if (!row.hasOwnProperty('client_price')) {
                                    const price = parseFloat(row.price) || 0;
                                    const markup = parseFloat(row.markup) || 0;
                                    const discount = parseFloat(row.discount) || 0;
                                    row.client_price = price * (1 + markup/100) * (1 - discount/100);
                                }
                                if (!row.hasOwnProperty('client_cost')) {
                                    row.client_cost = (parseFloat(row.quantity) || 0) * (parseFloat(row.client_price) || 0);
                                }
                            }
                        }
                    }
                    
                    return result;
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º loadEstimateData:', error);
                    
                    // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                    if (!this.data.sheets) {
                        this.data.sheets = [{ data: [] }];
                    }
                }
                
                if (typeof this.data.currentSheet !== 'number' || this.data.currentSheet < 0) {
                    console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π currentSheet, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ 0');
                    this.data.currentSheet = 0;
                }
                
                // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É —Ç–µ–∫—É—â–µ–≥–æ –ª–∏—Å—Ç–∞ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
                const currentSheet = this.data.currentSheet;
                if (!this.data.sheets[currentSheet]) {
                    this.data.sheets[currentSheet] = { data: [] };
                }
                
                if (!this.data.sheets[currentSheet].data) {
                    this.data.sheets[currentSheet].data = [];
                }
                
                console.log('‚ÑπÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', 
                    '–ª–∏—Å—Ç–æ–≤:', this.data.sheets.length, 
                    '—Å—Ç—Ä–æ–∫ –≤ —Ç–µ–∫—É—â–µ–º –ª–∏—Å—Ç–µ:', this.data.sheets[currentSheet].data.length
                );
                
                // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º client_price –∏ client_cost –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫
                console.log('üîÑ –ü–µ—Ä–µ—Å—á–µ—Ç client_price –∏ client_cost –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
                
                const sheetData = this.data.sheets[currentSheet].data;
                let calculatedRows = 0;
                
                for (let i = 0; i < sheetData.length; i++) {
                    const row = sheetData[i];
                    if (row && typeof row === 'object') {
                        // –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç
                        const price = parseFloat(row.price) || 0;
                        const markup = parseFloat(row.markup) || 0;
                        const discount = parseFloat(row.discount) || 0;
                        const quantity = parseFloat(row.quantity) || 0;
                        
                        row.client_price = price * (1 + markup/100) * (1 - discount/100);
                        row.client_cost = quantity * row.client_price;
                        calculatedRows++;
                    }
                }
                
                console.log(`‚ÑπÔ∏è –ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${calculatedRows} —Å—Ç—Ä–æ–∫`);
                
                // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
                if (typeof this.calculateTotals === 'function') {
                    this.calculateTotals();
                    console.log('‚úÖ –ò—Ç–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã');
                }
                
                return result;
            };
            
            console.log('‚úÖ –ü–∞—Ç—á –¥–ª—è –º–µ—Ç–æ–¥–∞ loadEstimateData —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω');
        }
        
        console.log('‚úÖ –í—Å–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—á–∏ –¥–ª—è EstimateEditor —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    checkForEstimateEditor();
});
