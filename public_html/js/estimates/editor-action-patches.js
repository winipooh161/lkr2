/**
 * –ü–∞—Ç—á–∏ –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –º–µ—Ç–æ–¥–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ EstimateEditor
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤,
 * –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ EstimateEditor
 */

document.addEventListener('DOMContentLoaded', function() {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ç—á–µ–π –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è EstimateEditor...');
    
    if (typeof EstimateEditor === 'undefined') {
        console.error('‚ùå –ö–ª–∞—Å—Å EstimateEditor –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    // –ü–∞—Ç—á–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏
    if (!EstimateEditor.prototype.moveSectionUp) {
        EstimateEditor.prototype.moveSectionUp = function(sectionIndex) {
            console.log('üîÑ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –≤–≤–µ—Ä—Ö:', sectionIndex);
            
            try {
                if (!this.data || !this.data.sections || !Array.isArray(this.data.sections)) {
                    console.warn('‚ö†Ô∏è –†–∞–∑–¥–µ–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                    return;
                }
                
                if (sectionIndex <= 0 || sectionIndex >= this.data.sections.length) {
                    console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ä–∞–∑–¥–µ–ª–∞:', sectionIndex);
                    return;
                }
                
                // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Ä–∞–∑–¥–µ–ª–æ–º
                const temp = this.data.sections[sectionIndex];
                this.data.sections[sectionIndex] = this.data.sections[sectionIndex - 1];
                this.data.sections[sectionIndex - 1] = temp;
                
                // –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                if (typeof this.buildTableBody === 'function') {
                    this.buildTableBody();
                } else if (typeof this.buildTable === 'function') {
                    this.buildTable();
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–∏
                if (typeof this.updateTotals === 'function') {
                    this.updateTotals();
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                this.hasChanges = true;
                if (typeof this.updateStatusIndicator === 'function') {
                    this.updateStatusIndicator('–ò–∑–º–µ–Ω–µ–Ω–æ');
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if (typeof this.showNotification === 'function') {
                    this.showNotification('–†–∞–∑–¥–µ–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤–≤–µ—Ä—Ö', 'success');
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª–∞ –≤–≤–µ—Ä—Ö:', error);
            }
        };
        
        console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥ moveSectionUp');
    }
    
    if (!EstimateEditor.prototype.moveSectionDown) {
        EstimateEditor.prototype.moveSectionDown = function(sectionIndex) {
            console.log('üîÑ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –≤–Ω–∏–∑:', sectionIndex);
            
            try {
                if (!this.data || !this.data.sections || !Array.isArray(this.data.sections)) {
                    console.warn('‚ö†Ô∏è –†–∞–∑–¥–µ–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                    return;
                }
                
                if (sectionIndex < 0 || sectionIndex >= this.data.sections.length - 1) {
                    console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ä–∞–∑–¥–µ–ª–∞:', sectionIndex);
                    return;
                }
                
                // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Ä–∞–∑–¥–µ–ª–æ–º
                const temp = this.data.sections[sectionIndex];
                this.data.sections[sectionIndex] = this.data.sections[sectionIndex + 1];
                this.data.sections[sectionIndex + 1] = temp;
                
                // –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                if (typeof this.buildTableBody === 'function') {
                    this.buildTableBody();
                } else if (typeof this.buildTable === 'function') {
                    this.buildTable();
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–∏
                if (typeof this.updateTotals === 'function') {
                    this.updateTotals();
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                this.hasChanges = true;
                if (typeof this.updateStatusIndicator === 'function') {
                    this.updateStatusIndicator('–ò–∑–º–µ–Ω–µ–Ω–æ');
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if (typeof this.showNotification === 'function') {
                    this.showNotification('–†–∞–∑–¥–µ–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤–Ω–∏–∑', 'success');
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª–∞ –≤–Ω–∏–∑:', error);
            }
        };
        
        console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥ moveSectionDown');
    }
    
    if (!EstimateEditor.prototype.editSection) {
        EstimateEditor.prototype.editSection = function(sectionIndex) {
            console.log('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞:', sectionIndex);
            
            try {
                if (!this.data || !this.data.sections || !Array.isArray(this.data.sections)) {
                    console.warn('‚ö†Ô∏è –†–∞–∑–¥–µ–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                    return;
                }
                
                if (sectionIndex < 0 || sectionIndex >= this.data.sections.length) {
                    console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ä–∞–∑–¥–µ–ª–∞:', sectionIndex);
                    return;
                }
                
                const section = this.data.sections[sectionIndex];
                const title = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞', section.title);
                
                if (title !== null && title.trim() !== '') {
                    section.title = title.trim();
                    
                    // –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                    if (typeof this.buildTableBody === 'function') {
                        this.buildTableBody();
                    } else if (typeof this.buildTable === 'function') {
                        this.buildTable();
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    this.hasChanges = true;
                    if (typeof this.updateStatusIndicator === 'function') {
                        this.updateStatusIndicator('–ò–∑–º–µ–Ω–µ–Ω–æ');
                    }
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    if (typeof this.showNotification === 'function') {
                        this.showNotification('–†–∞–∑–¥–µ–ª –æ–±–Ω–æ–≤–ª–µ–Ω', 'success');
                    }
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª–∞:', error);
            }
        };
        
        console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥ editSection');
    }
    
    // –ü–∞—Ç—á–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    if (!EstimateEditor.prototype.editItem) {
        EstimateEditor.prototype.editItem = function(sectionIndex, itemIndex) {
            console.log('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞:', sectionIndex, itemIndex);
            
            try {
                if (!this.data || !this.data.sections || !Array.isArray(this.data.sections)) {
                    console.warn('‚ö†Ô∏è –†–∞–∑–¥–µ–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                    return;
                }
                
                if (sectionIndex < 0 || sectionIndex >= this.data.sections.length) {
                    console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ä–∞–∑–¥–µ–ª–∞:', sectionIndex);
                    return;
                }
                
                const section = this.data.sections[sectionIndex];
                
                if (!section.items || !Array.isArray(section.items)) {
                    console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ:', sectionIndex);
                    return;
                }
                
                if (itemIndex < 0 || itemIndex >= section.items.length) {
                    console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞:', itemIndex);
                    return;
                }
                
                const item = section.items[itemIndex];
                
                // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                const modal = document.createElement('div');
                modal.className = 'modal fade';
                modal.innerHTML = `
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                <div class="row">
                                    <div class="col-md-8">
                                        <div class="mb-3">
                                            <label class="form-label">–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</label>
                                            <input type="text" class="form-control" id="editItemNameInput" 
                                                   value="${item.name || ''}" placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ">
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label">–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è:</label>
                                            <input type="text" class="form-control" id="editItemUnitInput" 
                                                   value="${item.unit || '—à—Ç'}" placeholder="–µ–¥.–∏–∑–º.">
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-3">
                                        <div class="mb-3">
                                            <label class="form-label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</label>
                                            <input type="number" class="form-control" id="editItemQuantityInput" 
                                                   value="${item.quantity || 0}" min="0" step="0.01">
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="mb-3">
                                            <label class="form-label">–¶–µ–Ω–∞:</label>
                                            <input type="number" class="form-control" id="editItemPriceInput" 
                                                   value="${item.price || 0}" min="0" step="0.01">
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="mb-3">
                                            <label class="form-label">–ù–∞—Ü–µ–Ω–∫–∞ %:</label>
                                            <input type="number" class="form-control" id="editItemMarkupInput" 
                                                   value="${item.markup || 20}" min="0" max="100">
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="mb-3">
                                            <label class="form-label">–°–∫–∏–¥–∫–∞ %:</label>
                                            <input type="number" class="form-control" id="editItemDiscountInput" 
                                                   value="${item.discount || 0}" min="0" max="100">
                                        </div>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="editIsHeaderCheck" ${item.is_header ? 'checked' : ''}>
                                        <label class="form-check-label" for="editIsHeaderCheck">
                                            –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã (–Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö)
                                        </label>
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">–û—Ç–º–µ–Ω–∞</button>
                                <button type="button" class="btn btn-primary" id="saveEditItemBtn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                            </div>
                        </div>
                    </div>
                `;
                
                document.body.appendChild(modal);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                const bootstrapModal = new bootstrap.Modal(modal);
                bootstrapModal.show();
                
                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
                modal.querySelector('#saveEditItemBtn').addEventListener('click', () => {
                    // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π
                    const name = modal.querySelector('#editItemNameInput').value.trim();
                    const unit = modal.querySelector('#editItemUnitInput').value.trim() || '—à—Ç';
                    const quantity = parseFloat(modal.querySelector('#editItemQuantityInput').value) || 0;
                    const price = parseFloat(modal.querySelector('#editItemPriceInput').value) || 0;
                    const markup = parseFloat(modal.querySelector('#editItemMarkupInput').value) || 20;
                    const discount = parseFloat(modal.querySelector('#editItemDiscountInput').value) || 0;
                    const isHeader = modal.querySelector('#editIsHeaderCheck').checked;
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
                    if (!name) {
                        if (typeof this.showNotification === 'function') {
                            this.showNotification('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', 'warning');
                        }
                        return;
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç
                    item.name = name;
                    item.unit = unit;
                    item.quantity = quantity;
                    item.price = price;
                    item.markup = markup;
                    item.discount = discount;
                    item.is_header = isHeader;
                    
                    // –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                    if (typeof this.buildTableBody === 'function') {
                        this.buildTableBody();
                    } else if (typeof this.buildTable === 'function') {
                        this.buildTable();
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–∏
                    if (typeof this.updateTotals === 'function') {
                        this.updateTotals();
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    this.hasChanges = true;
                    if (typeof this.updateStatusIndicator === 'function') {
                        this.updateStatusIndicator('–ò–∑–º–µ–Ω–µ–Ω–æ');
                    }
                    
                    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                    bootstrapModal.hide();
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    if (typeof this.showNotification === 'function') {
                        this.showNotification('–≠–ª–µ–º–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω', 'success');
                    }
                });
                
                // –£–¥–∞–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
                modal.addEventListener('hidden.bs.modal', () => {
                    modal.remove();
                });
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞:', error);
            }
        };
        
        console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥ editItem');
    }
    
    if (!EstimateEditor.prototype.duplicateItem) {
        EstimateEditor.prototype.duplicateItem = function(sectionIndex, itemIndex) {
            console.log('üîÑ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞:', sectionIndex, itemIndex);
            
            try {
                if (!this.data || !this.data.sections || !Array.isArray(this.data.sections)) {
                    console.warn('‚ö†Ô∏è –†–∞–∑–¥–µ–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                    return;
                }
                
                if (sectionIndex < 0 || sectionIndex >= this.data.sections.length) {
                    console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ä–∞–∑–¥–µ–ª–∞:', sectionIndex);
                    return;
                }
                
                const section = this.data.sections[sectionIndex];
                
                if (!section.items || !Array.isArray(section.items)) {
                    console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ:', sectionIndex);
                    return;
                }
                
                if (itemIndex < 0 || itemIndex >= section.items.length) {
                    console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞:', itemIndex);
                    return;
                }
                
                // –î–µ–ª–∞–µ–º –≥–ª—É–±–æ–∫—É—é –∫–æ–ø–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞
                let newItem;
                try {
                    newItem = JSON.parse(JSON.stringify(section.items[itemIndex]));
                } catch (jsonError) {
                    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞, –¥–µ–ª–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–æ–ø–∏—é');
                    
                    const item = section.items[itemIndex];
                    newItem = {};
                    for (const key in item) {
                        if (Object.prototype.hasOwnProperty.call(item, key)) {
                            newItem[key] = item[key];
                        }
                    }
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–ø–∏–∏
                newItem.name = newItem.name ? `–ö–æ–ø–∏—è: ${newItem.name}` : '–ö–æ–ø–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞';
                
                // –î–æ–±–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
                section.items.splice(itemIndex + 1, 0, newItem);
                
                // –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                if (typeof this.buildTableBody === 'function') {
                    this.buildTableBody();
                } else if (typeof this.buildTable === 'function') {
                    this.buildTable();
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–∏
                if (typeof this.updateTotals === 'function') {
                    this.updateTotals();
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                this.hasChanges = true;
                if (typeof this.updateStatusIndicator === 'function') {
                    this.updateStatusIndicator('–ò–∑–º–µ–Ω–µ–Ω–æ');
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if (typeof this.showNotification === 'function') {
                    this.showNotification('–≠–ª–µ–º–µ–Ω—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω', 'success');
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞:', error);
            }
        };
        
        console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥ duplicateItem');
    }
    
    if (!EstimateEditor.prototype.moveItemUp) {
        EstimateEditor.prototype.moveItemUp = function(sectionIndex, itemIndex) {
            console.log('üîÑ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–≤–µ—Ä—Ö:', sectionIndex, itemIndex);
            
            try {
                if (!this.data || !this.data.sections || !Array.isArray(this.data.sections)) {
                    console.warn('‚ö†Ô∏è –†–∞–∑–¥–µ–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                    return;
                }
                
                if (sectionIndex < 0 || sectionIndex >= this.data.sections.length) {
                    console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ä–∞–∑–¥–µ–ª–∞:', sectionIndex);
                    return;
                }
                
                const section = this.data.sections[sectionIndex];
                
                if (!section.items || !Array.isArray(section.items)) {
                    console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ:', sectionIndex);
                    return;
                }
                
                if (itemIndex <= 0 || itemIndex >= section.items.length) {
                    console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞:', itemIndex);
                    return;
                }
                
                // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
                const temp = section.items[itemIndex];
                section.items[itemIndex] = section.items[itemIndex - 1];
                section.items[itemIndex - 1] = temp;
                
                // –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                if (typeof this.buildTableBody === 'function') {
                    this.buildTableBody();
                } else if (typeof this.buildTable === 'function') {
                    this.buildTable();
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–∏
                if (typeof this.updateTotals === 'function') {
                    this.updateTotals();
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                this.hasChanges = true;
                if (typeof this.updateStatusIndicator === 'function') {
                    this.updateStatusIndicator('–ò–∑–º–µ–Ω–µ–Ω–æ');
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–≤–µ—Ä—Ö:', error);
            }
        };
        
        console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥ moveItemUp');
    }
    
    if (!EstimateEditor.prototype.moveItemDown) {
        EstimateEditor.prototype.moveItemDown = function(sectionIndex, itemIndex) {
            console.log('üîÑ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–Ω–∏–∑:', sectionIndex, itemIndex);
            
            try {
                if (!this.data || !this.data.sections || !Array.isArray(this.data.sections)) {
                    console.warn('‚ö†Ô∏è –†–∞–∑–¥–µ–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                    return;
                }
                
                if (sectionIndex < 0 || sectionIndex >= this.data.sections.length) {
                    console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ä–∞–∑–¥–µ–ª–∞:', sectionIndex);
                    return;
                }
                
                const section = this.data.sections[sectionIndex];
                
                if (!section.items || !Array.isArray(section.items)) {
                    console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ:', sectionIndex);
                    return;
                }
                
                if (itemIndex < 0 || itemIndex >= section.items.length - 1) {
                    console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞:', itemIndex);
                    return;
                }
                
                // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
                const temp = section.items[itemIndex];
                section.items[itemIndex] = section.items[itemIndex + 1];
                section.items[itemIndex + 1] = temp;
                
                // –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                if (typeof this.buildTableBody === 'function') {
                    this.buildTableBody();
                } else if (typeof this.buildTable === 'function') {
                    this.buildTable();
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–∏
                if (typeof this.updateTotals === 'function') {
                    this.updateTotals();
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                this.hasChanges = true;
                if (typeof this.updateStatusIndicator === 'function') {
                    this.updateStatusIndicator('–ò–∑–º–µ–Ω–µ–Ω–æ');
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–Ω–∏–∑:', error);
            }
        };
        
        console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥ moveItemDown');
    }
    
    if (!EstimateEditor.prototype.addRowToSection) {
        EstimateEditor.prototype.addRowToSection = function(sectionIndex) {
            console.log('‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª:', sectionIndex);
            
            try {
                if (!this.data || !this.data.sections || !Array.isArray(this.data.sections)) {
                    console.warn('‚ö†Ô∏è –†–∞–∑–¥–µ–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                    return;
                }
                
                if (sectionIndex < 0 || sectionIndex >= this.data.sections.length) {
                    console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ä–∞–∑–¥–µ–ª–∞:', sectionIndex);
                    return;
                }
                
                // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
                const modal = document.createElement('div');
                modal.className = 'modal fade';
                modal.innerHTML = `
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –≤ —Ä–∞–∑–¥–µ–ª "${this.data.sections[sectionIndex].title}"</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                <div class="row">
                                    <div class="col-md-8">
                                        <div class="mb-3">
                                            <label class="form-label">–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</label>
                                            <input type="text" class="form-control" id="newItemNameInput" 
                                                   placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã/–º–∞—Ç–µ—Ä–∏–∞–ª–∞">
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label">–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è:</label>
                                            <input type="text" class="form-control" id="newItemUnitInput" 
                                                   value="—à—Ç" placeholder="–µ–¥.–∏–∑–º.">
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-3">
                                        <div class="mb-3">
                                            <label class="form-label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</label>
                                            <input type="number" class="form-control" id="newItemQuantityInput" 
                                                   value="1" min="0" step="0.01">
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="mb-3">
                                            <label class="form-label">–¶–µ–Ω–∞:</label>
                                            <input type="number" class="form-control" id="newItemPriceInput" 
                                                   value="0" min="0" step="0.01">
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="mb-3">
                                            <label class="form-label">–ù–∞—Ü–µ–Ω–∫–∞ %:</label>
                                            <input type="number" class="form-control" id="newItemMarkupInput" 
                                                   value="20" min="0" max="100">
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="mb-3">
                                            <label class="form-label">–°–∫–∏–¥–∫–∞ %:</label>
                                            <input type="number" class="form-control" id="newItemDiscountInput" 
                                                   value="0" min="0" max="100">
                                        </div>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="newIsHeaderCheck">
                                        <label class="form-check-label" for="newIsHeaderCheck">
                                            –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã (–Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö)
                                        </label>
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">–û—Ç–º–µ–Ω–∞</button>
                                <button type="button" class="btn btn-primary" id="addNewItemBtn">–î–æ–±–∞–≤–∏—Ç—å</button>
                            </div>
                        </div>
                    </div>
                `;
                
                document.body.appendChild(modal);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                const bootstrapModal = new bootstrap.Modal(modal);
                bootstrapModal.show();
                
                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
                modal.querySelector('#addNewItemBtn').addEventListener('click', () => {
                    // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π
                    const name = modal.querySelector('#newItemNameInput').value.trim();
                    const unit = modal.querySelector('#newItemUnitInput').value.trim() || '—à—Ç';
                    const quantity = parseFloat(modal.querySelector('#newItemQuantityInput').value) || 0;
                    const price = parseFloat(modal.querySelector('#newItemPriceInput').value) || 0;
                    const markup = parseFloat(modal.querySelector('#newItemMarkupInput').value) || 20;
                    const discount = parseFloat(modal.querySelector('#newItemDiscountInput').value) || 0;
                    const isHeader = modal.querySelector('#newIsHeaderCheck').checked;
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
                    if (!name) {
                        if (typeof this.showNotification === 'function') {
                            this.showNotification('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', 'warning');
                        }
                        return;
                    }
                    
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
                    const newItem = {
                        name: name,
                        unit: unit,
                        quantity: quantity,
                        price: price,
                        markup: markup,
                        discount: discount,
                        is_header: isHeader
                    };
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ —Ä–∞–∑–¥–µ–ª
                    const section = this.data.sections[sectionIndex];
                    if (!section.items) {
                        section.items = [];
                    }
                    section.items.push(newItem);
                    
                    // –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                    if (typeof this.buildTableBody === 'function') {
                        this.buildTableBody();
                    } else if (typeof this.buildTable === 'function') {
                        this.buildTable();
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–∏
                    if (typeof this.updateTotals === 'function') {
                        this.updateTotals();
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    this.hasChanges = true;
                    if (typeof this.updateStatusIndicator === 'function') {
                        this.updateStatusIndicator('–ò–∑–º–µ–Ω–µ–Ω–æ');
                    }
                    
                    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                    bootstrapModal.hide();
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    if (typeof this.showNotification === 'function') {
                        this.showNotification('–°—Ç—Ä–æ–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞', 'success');
                    }
                });
                
                // –£–¥–∞–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
                modal.addEventListener('hidden.bs.modal', () => {
                    modal.remove();
                });
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª:', error);
            }
        };
        
        console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥ addRowToSection');
    }
    
    console.log('‚úÖ –í—Å–µ –ø–∞—Ç—á–∏ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è EstimateEditor —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
});
