/**
 * –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–∞–¥–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏
 * –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞: –¥–∏–∑–∞–π–Ω, —Å—Ö–µ–º—ã, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –¥–æ–≥–æ–≤–æ—Ä, –ø—Ä–æ—á–µ–µ
 */

console.log('=== GLOBAL UPLOAD LOADER SCRIPT LOADING ===');

// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞
if (window.GlobalUploadLoaderLoaded) {
    console.warn('Global Upload Loader already loaded, skipping');
} else {
    window.GlobalUploadLoaderLoaded = true;

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –ª–æ–∞–¥–µ—Ä–∞
window.GlobalUploadLoader = {
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤ –≤ —Å–∏–Ω–µ-–≥–æ–ª—É–±–æ–π —Ç–µ–º–∞—Ç–∏–∫–µ
    fileTypeConfigs: {
        design: {
            icon: 'üé®',
            color: '#1E88E5',
            bgColor: 'rgba(30, 136, 229, 0.1)',
            borderColor: '#1E88E5',
            text: '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∏–∑–∞–π–Ω–∞',
            description: '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–∏–∑–∞–π–Ω–∞...',
            progressColor: '#1E88E5',
            shadowColor: 'rgba(30, 136, 229, 0.3)'
        },
        scheme: {
            icon: 'üìê',
            color: '#00BCD4',
            bgColor: 'rgba(0, 188, 212, 0.1)',
            borderColor: '#00BCD4',
            text: '–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ö–µ–º—ã',
            description: '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ö–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤...',
            progressColor: '#00BCD4',
            shadowColor: 'rgba(0, 188, 212, 0.3)'
        },
        document: {
            icon: 'üìÑ',
            color: '#2196F3',
            bgColor: 'rgba(33, 150, 243, 0.1)',
            borderColor: '#2196F3',
            text: '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞',
            description: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...',
            progressColor: '#2196F3',
            shadowColor: 'rgba(33, 150, 243, 0.3)'
        },
        contract: {
            icon: 'üìã',
            color: '#0288D1',
            bgColor: 'rgba(2, 136, 209, 0.1)',
            borderColor: '#0288D1',
            text: '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–∞',
            description: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...',
            progressColor: '#0288D1',
            shadowColor: 'rgba(2, 136, 209, 0.3)'
        },
        other: {
            icon: 'üìÅ',
            color: '#03A9F4',
            bgColor: 'rgba(3, 169, 244, 0.1)',
            borderColor: '#03A9F4',
            text: '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞',
            description: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—á–∏—Ö —Ñ–∞–π–ª–æ–≤...',
            progressColor: '#03A9F4',
            shadowColor: 'rgba(3, 169, 244, 0.3)'
        }
    },
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    overlay: null,
    loader: null,
    
    // –°–æ–∑–¥–∞–Ω–∏–µ HTML-—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ª–æ–∞–¥–µ—Ä–∞
    createLoader: function() {
        if (this.overlay) {
            return; // –õ–æ–∞–¥–µ—Ä —É–∂–µ —Å–æ–∑–¥–∞–Ω
        }
        
        console.log('Creating global upload loader');
        
        // –°–æ–∑–¥–∞–µ–º overlay
        this.overlay = document.createElement('div');
        this.overlay.id = 'global-upload-overlay';
        this.overlay.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            z-index: 9999;
            display: none;
            justify-content: center;
            align-items: center;
            backdrop-filter: blur(3px);
            transition: all 0.3s ease;
        `;
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ª–æ–∞–¥–µ—Ä–∞
        this.loader = document.createElement('div');
        this.loader.id = 'global-upload-loader';
        this.loader.style.cssText = `
            background: white;
            border-radius: 20px;
            padding: 40px;
            text-align: center;
            box-shadow: 0 25px 80px rgba(0, 0, 0, 0.15);
            min-width: 380px;
            max-width: 500px;
            border: 3px solid #ddd;
            transform: scale(0.8);
            transition: all 0.4s cubic-bezier(0.34, 1.56, 0.64, 1);
            position: relative;
            overflow: hidden;
        `;
        
        // HTML-—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–æ–∞–¥–µ—Ä–∞
        this.loader.innerHTML = `
            <div class="loader-icon" style="font-size: 60px; margin-bottom: 20px; animation: pulse 2s infinite;">
                üîÑ
            </div>
            <div class="loader-title" style="font-size: 24px; font-weight: bold; margin-bottom: 10px; color: #333;">
                –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
            </div>
            <div class="loader-description" style="font-size: 16px; color: #666; margin-bottom: 30px;">
                –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞...
            </div>
            <div class="loader-filename" style="font-size: 14px; color: #999; margin-bottom: 20px; word-break: break-all;">
                
            </div>
            <div class="progress-container" style="background: #f0f0f0; border-radius: 10px; height: 20px; margin-bottom: 20px; overflow: hidden;">
                <div class="progress-bar" style="height: 100%; background: linear-gradient(90deg, #4CAF50, #45a049); width: 0%; transition: width 0.3s ease; border-radius: 10px; position: relative;">
                    <div style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent); animation: shimmer 2s infinite;"></div>
                </div>
            </div>
            <div class="progress-text" style="font-size: 14px; color: #666;">
                0%
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏–∏
        const style = document.createElement('style');
        style.textContent = `
            @keyframes pulse {
                0%, 100% { transform: scale(1); opacity: 1; }
                50% { transform: scale(1.15); opacity: 0.8; }
            }
            
            @keyframes shimmer {
                0% { transform: translateX(-100%); }
                100% { transform: translateX(100%); }
            }
            
            @keyframes bounce {
                0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
                40% { transform: translateY(-15px); }
                60% { transform: translateY(-8px); }
            }
            
            @keyframes rotate {
                from { transform: rotate(0deg); }
                to { transform: rotate(360deg); }
            }
            
            @keyframes float {
                0%, 100% { transform: translateY(0px) rotate(0deg); }
                33% { transform: translateY(-10px) rotate(2deg); }
                66% { transform: translateY(5px) rotate(-2deg); }
            }
            
            @keyframes glow {
                0%, 100% { box-shadow: 0 0 5px currentColor; }
                50% { box-shadow: 0 0 20px currentColor, 0 0 30px currentColor; }
            }
            
            .file-type-design .loader-icon {
                animation: bounce 2s infinite;
                filter: drop-shadow(0 0 10px #1E88E5);
            }
            
            .file-type-scheme .loader-icon {
                animation: rotate 3s linear infinite;
                filter: drop-shadow(0 0 10px #00BCD4);
            }
            
            .file-type-document .loader-icon {
                animation: pulse 2s infinite;
                filter: drop-shadow(0 0 10px #2196F3);
            }
            
            .file-type-contract .loader-icon {
                animation: float 3s ease-in-out infinite;
                filter: drop-shadow(0 0 10px #0288D1);
            }
            
            .file-type-other .loader-icon {
                animation: bounce 2s infinite;
                filter: drop-shadow(0 0 10px #03A9F4);
            }
            
            /* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ */
            .file-type-design {
                animation: glow 3s ease-in-out infinite;
                color: #1E88E5;
            }
            
            .file-type-scheme {
                animation: glow 4s ease-in-out infinite;
                color: #00BCD4;
            }
            
            .file-type-document {
                animation: glow 3.5s ease-in-out infinite;
                color: #2196F3;
            }
            
            .file-type-contract {
                animation: glow 4.5s ease-in-out infinite;
                color: #0288D1;
            }
            
            .file-type-other {
                animation: glow 3s ease-in-out infinite;
                color: #03A9F4;
            }
        `;
        document.head.appendChild(style);
        
        this.overlay.appendChild(this.loader);
        document.body.appendChild(this.overlay);
        
        console.log('Global upload loader created');
    },
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    getFileTypeConfig: function(fileType) {
        const config = this.fileTypeConfigs[fileType];
        if (!config) {
            console.warn('Unknown file type:', fileType, 'using default config');
            return this.fileTypeConfigs.other;
        }
        return config;
    },
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–∞–¥–µ—Ä
    show: function(filename, fileType) {
        this.createLoader();
        
        console.log('Showing global loader for file type:', fileType);
        
        const config = this.getFileTypeConfig(fileType);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ª–æ–∞–¥–µ—Ä–∞
        const icon = this.loader.querySelector('.loader-icon');
        const title = this.loader.querySelector('.loader-title');
        const description = this.loader.querySelector('.loader-description');
        const filenameEl = this.loader.querySelector('.loader-filename');
        const progressBar = this.loader.querySelector('.progress-bar');
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        icon.textContent = config.icon;
        title.textContent = config.text;
        description.textContent = config.description;
        filenameEl.textContent = filename || '';
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
        this.loader.style.borderColor = config.borderColor;
        this.loader.style.backgroundColor = config.bgColor;
        this.loader.style.boxShadow = `0 25px 80px ${config.shadowColor}`;
        title.style.color = config.color;
        progressBar.style.background = `linear-gradient(90deg, ${config.progressColor}, ${config.progressColor}dd)`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        this.loader.className = '';
        this.loader.classList.add('file-type-' + fileType);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º overlay
        this.overlay.style.display = 'flex';
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            this.overlay.style.opacity = '1';
            this.loader.style.transform = 'scale(1)';
        }, 10);
        
        console.log('Global loader shown with config:', config);
    },
    
    // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
    updateProgress: function(percent) {
        if (!this.loader) return;
        
        const progressBar = this.loader.querySelector('.progress-bar');
        const progressText = this.loader.querySelector('.progress-text');
        
        if (progressBar && progressText) {
            progressBar.style.width = percent + '%';
            progressText.textContent = percent + '%';
        }
    },
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ø–µ—Ö
    showSuccess: function(message) {
        if (!this.loader) return;
        
        console.log('Showing success message:', message);
        
        const icon = this.loader.querySelector('.loader-icon');
        const title = this.loader.querySelector('.loader-title');
        const description = this.loader.querySelector('.loader-description');
        const progressBar = this.loader.querySelector('.progress-bar');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        icon.textContent = '‚úÖ';
        icon.style.animation = 'bounce 0.6s ease';
        title.textContent = '–£—Å–ø–µ—à–Ω–æ!';
        title.style.color = '#4CAF50';
        description.textContent = message;
        
        // –ó–µ–ª–µ–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progressBar.style.background = 'linear-gradient(90deg, #4CAF50, #45a049)';
        progressBar.style.width = '100%';
        
        // –ü—Ä—è—á–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            this.hide();
        }, 2000);
    },
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
    showError: function(message) {
        if (!this.loader) return;
        
        console.log('Showing error message:', message);
        
        const icon = this.loader.querySelector('.loader-icon');
        const title = this.loader.querySelector('.loader-title');
        const description = this.loader.querySelector('.loader-description');
        const progressBar = this.loader.querySelector('.progress-bar');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        icon.textContent = '‚ùå';
        icon.style.animation = 'pulse 0.6s ease';
        title.textContent = '–û—à–∏–±–∫–∞!';
        title.style.color = '#F44336';
        description.textContent = message;
        
        // –ö—Ä–∞—Å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progressBar.style.background = 'linear-gradient(90deg, #F44336, #d32f2f)';
        
        // –ü—Ä—è—á–µ–º —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            this.hide();
        }, 4000);
    },
    
    // –°–∫—Ä—ã—Ç—å –ª–æ–∞–¥–µ—Ä
    hide: function() {
        if (!this.overlay) return;
        
        console.log('Hiding global loader');
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
        this.overlay.style.opacity = '0';
        this.loader.style.transform = 'scale(0.8)';
        
        setTimeout(() => {
            this.overlay.style.display = 'none';
            
            // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if (this.loader) {
                const progressBar = this.loader.querySelector('.progress-bar');
                const progressText = this.loader.querySelector('.progress-text');
                
                if (progressBar) progressBar.style.width = '0%';
                if (progressText) progressText.textContent = '0%';
            }
        }, 300);
    },
    
    // –£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –ª–æ–∞–¥–µ—Ä
    destroy: function() {
        if (this.overlay) {
            this.overlay.remove();
            this.overlay = null;
            this.loader = null;
        }
    }
};

console.log('‚úÖ Global Upload Loader initialized');

} // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–ª–æ–∫ if (window.GlobalUploadLoaderLoaded)
