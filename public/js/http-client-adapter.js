/**
 * –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ (—Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å axios)
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –±–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ axios
 * –í–µ—Ä—Å–∏—è: 1.0
 * –î–∞—Ç–∞: 11.07.2025
 */

(function() {
    'use strict';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ axios
    const hasAxios = typeof axios !== 'undefined';
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—à–µ–π –æ–±–µ—Ä—Ç–∫–∏
    const HttpClient = {
        /**
         * –û—Ç–ø—Ä–∞–≤–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞
         * @param {string} url - URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
         * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
         * @param {Object} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (headers, –∏ —Ç.–¥.)
         * @returns {Promise} - Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞
         */
        post: function(url, data, config = {}) {
            // –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω axios, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if (hasAxios) {
                console.log('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ axios');
                return axios.post(url, data, config);
            }
            
            // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º fetch API
            console.log('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ fetch (axios –Ω–µ –Ω–∞–π–¥–µ–Ω)');
            
            const headers = config.headers || {};
            
            return fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    ...headers
                },
                body: JSON.stringify(data),
                credentials: 'same-origin'
            })
            .then(response => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
                if (!response.ok) {
                    throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
                }
                
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å axios
                return response.json().then(data => {
                    return {
                        data: data,
                        status: response.status,
                        statusText: response.statusText,
                        headers: response.headers,
                        config: config
                    };
                });
            });
        },
        
        /**
         * –û—Ç–ø—Ä–∞–≤–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞
         * @param {string} url - URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
         * @param {Object} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (params, headers, –∏ —Ç.–¥.)
         * @returns {Promise} - Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞
         */
        get: function(url, config = {}) {
            // –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω axios, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if (hasAxios) {
                console.log('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ axios');
                return axios.get(url, config);
            }
            
            // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º fetch API
            console.log('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ fetch (axios –Ω–µ –Ω–∞–π–¥–µ–Ω)');
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            let finalUrl = url;
            if (config.params) {
                const queryString = new URLSearchParams(config.params).toString();
                finalUrl = `${url}${url.includes('?') ? '&' : '?'}${queryString}`;
            }
            
            const headers = config.headers || {};
            
            return fetch(finalUrl, {
                method: 'GET',
                headers: headers,
                credentials: 'same-origin'
            })
            .then(response => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
                if (!response.ok) {
                    throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
                }
                
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å axios
                return response.json().then(data => {
                    return {
                        data: data,
                        status: response.status,
                        statusText: response.statusText,
                        headers: response.headers,
                        config: config
                    };
                });
            });
        }
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–µ—Ä—Ç–∫—É –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
    window.httpClient = HttpClient;
    
    // –ï—Å–ª–∏ axios –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    if (!hasAxios) {
        console.log('‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ axios –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—é –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏');
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è axios
        window.axios = {
            post: HttpClient.post,
            get: HttpClient.get,
            isAxiosMock: true // –§–ª–∞–≥, —á—Ç–æ —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
        };
        
        console.log('‚úÖ –ó–∞–≥–ª—É—à–∫–∞ axios —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    }
})();
