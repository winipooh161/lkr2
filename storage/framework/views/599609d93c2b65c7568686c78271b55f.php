<script>
/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Ñ–æ—Ä–º—É–ª –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ —Å–º–µ—Ç
 * –í–µ—Ä—Å–∏—è: 5.0 (–ø–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Ñ–æ—Ä–º—É–ª)
 */

// –°–æ–∑–¥–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π API –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–∏—Å—Ç–µ–º
if (typeof window.ExcelFormulaSystem === 'undefined') {
    console.log('üîß –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç window.ExcelFormulaSystem');
    window.ExcelFormulaSystem = {
        // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Ä–∞—Å—á–µ—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        recalculateAll: function() {
            if (window.UnifiedFormulaSystem) {
                console.log('üîÑ –ü–µ—Ä–µ—Å—á–µ—Ç —á–µ—Ä–µ–∑ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É');
                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
                const editorData = this._getEditorData();
                if (editorData) {
                    window.UnifiedFormulaSystem.calculateFormulas(
                        editorData.data,
                        editorData.columns,
                        (result) => {
                            if (result.success) {
                                console.log('‚úÖ –ü–µ—Ä–µ—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                                this._triggerCallbacks('recalculate', result);
                                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
                                this.calculateTotals();
                            } else {
                                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞:', result.error);
                                this._triggerCallbacks('error', result);
                            }
                        }
                    );
                } else {
                    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
                    this.calculateTotals();
                }
            } else {
                // –ï—Å–ª–∏ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
                console.log('üîÑ –ü–µ—Ä–µ—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤ –±–µ–∑ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã');
                this.calculateTotals();
            }
            return this;
        },
        
        recalculateByRows: function(rows) {
            console.log('üìã –ü–µ—Ä–µ—Å—á–µ—Ç –ø–æ —Å—Ç—Ä–æ–∫–∞–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ');
            this.recalculateAll();
            return { success: true };
        },
        
        prepareDataForSave: function() {
            console.log('üíæ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            return true;
        },

        // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        recalculateTotals: function() {
            return this.calculateTotals();
        },
        
        recalculateTotalsWithoutReordering: function() {
            return this.calculateTotals();
        },
        
        recalculateRow: function(row) {
            return this.recalculateAll();
        },
        
        // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ –∏—Ç–æ–≥–æ–≤
        calculateTotals: function() {
            const table = document.querySelector('#json-table-container-table');
            if (!table) {
                console.warn('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏—Ç–æ–≥–æ–≤');
                return null;
            }
            
            const data = this._extractDataFromTable(table);
            const totals = {
                sum: 0,          // –ò—Ç–æ–≥ —Å—Ç–æ–ª–±—Ü–∞ "–°—Ç–æ–∏–º–æ—Å—Ç—å" (—Ä–∞–±–æ—Ç—ã)
                client_sum: 0,   // –ò—Ç–æ–≥ —Å—Ç–æ–ª–±—Ü–∞ "–°—É–º–º–∞ –∫–ª–∏–µ–Ω—Ç–∞" (—Ä–∞–±–æ—Ç—ã)
                materials_sum: 0, // –ò—Ç–æ–≥ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                grand_total: 0   // –û–±—â–∏–π –∏—Ç–æ–≥ (—Ä–∞–±–æ—Ç—ã + –º–∞—Ç–µ—Ä–∏–∞–ª—ã)
            };
            
            console.log('üî¢ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤ –¥–ª—è', data.length, '—Å—Ç—Ä–æ–∫');
            
            // –°—É–º–º–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö, –∏—Å–∫–ª—é—á–∞—è –≥—Ä—É–ø–ø—ã –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            data.forEach((row, index) => {
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—ã –ø–æ –Ω–∞–ª–∏—á–∏—é –∫–ª–∞—Å—Å–∞ –≤ DOM
                const rowElement = table.querySelector(`tr[data-row-index="${index}"]`);
                const isGroupHeader = rowElement && rowElement.classList.contains('group-header');
                
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≥—Ä—É–ø–ø –∏ —Å—Ç—Ä–æ–∫–∏ –∏—Ç–æ–≥–æ–≤
                if (isGroupHeader || 
                    !row.name || 
                    row.name === '' || 
                    row.name.toLowerCase().includes('–æ–±—â–∏–π –∏—Ç–æ–≥') ||
                    row.name.toLowerCase().includes('–∏—Ç–æ–≥')
                ) {
                    return;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å—Ç—Ä–æ–∫–∏ (—Ä–∞–±–æ—Ç—ã –∏–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã)
                const isWorkRow = !row.type || row.type.toLowerCase() !== 'materials';
                const isMaterialRow = row.type && row.type.toLowerCase() === 'materials';
                
                // –ü–∞—Ä—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
                const sum = this._parseNumericValue(row.sum);
                const clientSum = this._parseNumericValue(row.client_sum);
                
                // –°—É–º–º–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                if (isWorkRow && sum > 0) {
                    totals.sum += sum;
                }
                if (isWorkRow && clientSum > 0) {
                    totals.client_sum += clientSum;
                }
                if (isMaterialRow && clientSum > 0) {
                    totals.materials_sum += clientSum;
                }
            });
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –∏—Ç–æ–≥ (—Ä–∞–±–æ—Ç—ã + –º–∞—Ç–µ—Ä–∏–∞–ª—ã)
            totals.grand_total = totals.client_sum + totals.materials_sum;
            
            console.log('üéØ –ò—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã:');
            console.log('  - –†–∞–±–æ—Ç—ã (–°—Ç–æ–∏–º–æ—Å—Ç—å):', totals.sum);
            console.log('  - –†–∞–±–æ—Ç—ã (–°—É–º–º–∞ –∫–ª–∏–µ–Ω—Ç–∞):', totals.client_sum);
            console.log('  - –ú–∞—Ç–µ—Ä–∏–∞–ª—ã:', totals.materials_sum);
            console.log('  - –û–ë–©–ò–ô –ò–¢–û–ì:', totals.grand_total);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –∏—Ç–æ–≥–æ–≤
            this._updateTotalRows(totals);
            
            return totals;
        },
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        _getEditorData: function() {
            if (window.jsonTableEditor && window.jsonTableEditor.sheets && window.jsonTableEditor.options) {
                const currentSheet = window.jsonTableEditor.sheets[window.jsonTableEditor.currentSheetIndex];
                return {
                    data: currentSheet.data,
                    columns: window.jsonTableEditor.options.columns
                };
            }
            
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ DOM
            const table = document.querySelector('#json-table-container-table');
            if (table) {
                const data = this._extractDataFromTable(table);
                return {
                    data: data,
                    columns: this._getColumnsFromTable(table)
                };
            }
            
            return null;
        },
        
        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã DOM
        _extractDataFromTable: function(table) {
            const rows = Array.from(table.querySelectorAll('tbody tr'));
            const data = [];
            
            rows.forEach((row, index) => {
                if (row.classList.contains('footer-row')) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∏—Ç–æ–≥–æ–≤
                
                const cells = Array.from(row.querySelectorAll('td[data-field]'));
                const rowData = {};
                
                cells.forEach(cell => {
                    const field = cell.getAttribute('data-field');
                    const value = cell.textContent.trim();
                    rowData[field] = value;
                });
                
                data.push(rowData);
            });
            
            return data;
        },
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        _getColumnsFromTable: function(table) {
            const headers = Array.from(table.querySelectorAll('thead th[data-field]'));
            return headers.map(header => ({
                name: header.getAttribute('data-field'),
                title: header.textContent.trim(),
                type: header.classList.contains('numeric') ? 'numeric' : 'text'
            }));
        },
        
        // –ü–∞—Ä—Å–∏–Ω–≥ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        _parseNumericValue: function(value) {
            if (!value || value === '') return 0;
            
            // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã, –∑–∞–ø—è—Ç—ã–µ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç—ã—Å—è—á, –≤–∞–ª—é—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            let cleanValue = String(value)
                .replace(/\s+/g, '') // —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
                .replace(/,/g, '') // —É–±–∏—Ä–∞–µ–º –∑–∞–ø—è—Ç—ã–µ
                .replace(/‚ÇΩ|—Ä—É–±\.?|rub/gi, '') // —É–±–∏—Ä–∞–µ–º –≤–∞–ª—é—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                .trim();
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
            const numValue = parseFloat(cleanValue);
            
            return isNaN(numValue) ? 0 : numValue;
        },
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –∏—Ç–æ–≥–æ–≤
        _updateTotalRows: function(totals) {
            console.log('üîç –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫ –∏—Ç–æ–≥–æ–≤...');
            
            // –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫ –∏—Ç–æ–≥–æ–≤
            let footerRows = document.querySelectorAll('tr.footer-row');
            console.log('üîç –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É tr.footer-row:', footerRows.length);
            
            if (footerRows.length === 0) {
                // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
                const allRows = document.querySelectorAll('#json-table-container-table tbody tr');
                console.log('üîç –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ:', allRows.length);
                
                // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º "–û–ë–©–ò–ô –ò–¢–û–ì"
                footerRows = Array.from(allRows).filter(row => {
                    const nameCell = row.querySelector('td[data-field="name"]');
                    const text = nameCell ? nameCell.textContent.trim().toUpperCase() : '';
                    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫—É:', text);
                    return text.includes('–û–ë–©–ò–ô –ò–¢–û–ì') || text.includes('–ò–¢–û–ì') || text.includes('TOTAL');
                });
                
                console.log('üéØ –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –∏—Ç–æ–≥–æ–≤ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É:', footerRows.length);
                
                if (footerRows.length === 0) {
                    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É
                    const lastRow = allRows[allRows.length - 1];
                    if (lastRow) {
                        console.log('üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –∏—Ç–æ–≥–æ–≤');
                        footerRows = [lastRow];
                    }
                }
            }
            
            if (footerRows.length === 0) {
                console.warn('‚ö†Ô∏è –°—Ç—Ä–æ–∫–∏ –∏—Ç–æ–≥–æ–≤ –≤–æ–æ–±—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
                return;
            }
            
            console.log('üìä –û–±–Ω–æ–≤–ª—è–µ–º', footerRows.length, '—Å—Ç—Ä–æ–∫ –∏—Ç–æ–≥–æ–≤');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏—Ç–æ–≥–æ–≤
            footerRows.forEach((row, rowIndex) => {
                console.log(`üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏—Ç–æ–≥–æ–≤ ${rowIndex + 1}`);
                this._updateSingleTotalRow(row, totals);
            });
            
            console.log('üìä –°—Ç—Ä–æ–∫–∏ –∏—Ç–æ–≥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', totals);
        },
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏—Ç–æ–≥–æ–≤
        _updateSingleTotalRow: function(row, totals) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å—Ç—Ä–æ–∫–∏ –∏—Ç–æ–≥–æ–≤
            const isGrandTotal = row.querySelector('td:first-child')?.textContent?.toLowerCase().includes('–æ–±—â–∏–π –∏—Ç–æ–≥');
            
            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–∏—Å–∫–∞ —è—á–µ–µ–∫
            let sumCell = row.querySelector('[data-field="sum"]') || 
                         row.querySelector('td[data-col-index="5"]') ||
                         row.cells[5];
            
            let clientSumCell = row.querySelector('[data-field="client_sum"]') || 
                               row.querySelector('td[data-col-index="9"]') ||
                               row.cells[9];
            
            // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —è—á–µ–π–∫—É "–¶–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞" –≤ –∏—Ç–æ–≥–∞—Ö - –æ–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—É–º–º—É
            
            console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —è—á–µ–π–∫–∏:');
            console.log('  - –Ø—á–µ–π–∫–∞ —Å—É–º–º—ã (–∫–æ–ª–æ–Ω–∫–∞ 5):', !!sumCell);
            console.log('  - –Ø—á–µ–π–∫–∞ —Å—É–º–º—ã –∫–ª–∏–µ–Ω—Ç–∞ (–∫–æ–ª–æ–Ω–∫–∞ 9):', !!clientSumCell);
            console.log('  - –¢–∏–ø —Å—Ç—Ä–æ–∫–∏ –∏—Ç–æ–≥–æ–≤:', isGrandTotal ? '–û–ë–©–ò–ô –ò–¢–û–ì' : '–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –∏—Ç–æ–≥');
            
            if (sumCell) {
                // –í –æ–±—â–µ–º –∏—Ç–æ–≥–µ –≤—ã–≤–æ–¥–∏–º —Å—É–º–º—É –≤—Å–µ—Ö —Ä–∞–±–æ—Ç
                const value = totals.sum;
                const formattedSum = this._formatNumber(value);
                sumCell.textContent = formattedSum;
                sumCell.title = `–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç: ${this._formatCurrency(value)}`;
                console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —è—á–µ–π–∫–∞ —Å—Ç–æ–ª–±—Ü–∞ "–°—Ç–æ–∏–º–æ—Å—Ç—å":', formattedSum);
            } else {
                console.warn('‚ùå –Ø—á–µ–π–∫–∞ —Å—Ç–æ–ª–±—Ü–∞ "–°—Ç–æ–∏–º–æ—Å—Ç—å" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }
            
            if (clientSumCell) {
                // –í –æ–±—â–µ–º –∏—Ç–æ–≥–µ –≤—ã–≤–æ–¥–∏–º —Å—É–º–º—É –≤—Å–µ—Ö —Ä–∞–±–æ—Ç –ò –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                const value = isGrandTotal ? totals.grand_total : totals.client_sum;
                const formattedClientSum = this._formatNumber(value);
                clientSumCell.textContent = formattedClientSum;
                
                if (isGrandTotal) {
                    clientSumCell.title = `–û–±—â–∏–π –∏—Ç–æ–≥: ${this._formatCurrency(value)} (—Ä–∞–±–æ—Ç—ã: ${this._formatCurrency(totals.client_sum)}, –º–∞—Ç–µ—Ä–∏–∞–ª—ã: ${this._formatCurrency(totals.materials_sum)})`;
                    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —è—á–µ–π–∫–∞ –û–ë–©–ï–ì–û –ò–¢–û–ì–ê:', formattedClientSum);
                } else {
                    clientSumCell.title = `–û–±—â–∞—è —Å—É–º–º–∞ –∫–ª–∏–µ–Ω—Ç–∞: ${this._formatCurrency(value)}`;
                    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —è—á–µ–π–∫–∞ —Å—Ç–æ–ª–±—Ü–∞ "–°—É–º–º–∞ –∫–ª–∏–µ–Ω—Ç–∞":', formattedClientSum);
                }
            } else {
                console.warn('‚ùå –Ø—á–µ–π–∫–∞ —Å—Ç–æ–ª–±—Ü–∞ "–°—É–º–º–∞ –∫–ª–∏–µ–Ω—Ç–∞" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const originalBg = row.style.backgroundColor;
            row.style.backgroundColor = isGrandTotal ? '#c3e6cb' : '#d4edda';
            setTimeout(() => {
                row.style.backgroundColor = originalBg;
            }, 1000);
        },
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
        _formatNumber: function(num) {
            if (isNaN(num) || num === null || num === undefined) return '0';
            
            return new Intl.NumberFormat('ru-RU', {
                minimumFractionDigits: 0,
                maximumFractionDigits: 2,
                useGrouping: true
            }).format(parseFloat(num));
        },
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        _formatCurrency: function(num) {
            if (isNaN(num) || num === null || num === undefined) return '0 ‚ÇΩ';
            
            return new Intl.NumberFormat('ru-RU', {
                style: 'currency',
                currency: 'RUB',
                minimumFractionDigits: 0,
                maximumFractionDigits: 2
            }).format(parseFloat(num));
        },
        
        // –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞—Ç–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        registerCallback: function(eventName, callback) {
            if (!this._callbacks) this._callbacks = {};
            if (!this._callbacks[eventName]) this._callbacks[eventName] = [];
            this._callbacks[eventName].push(callback);
            return this;
        },
        
        _triggerCallbacks: function(eventName, data) {
            if (this._callbacks && this._callbacks[eventName]) {
                this._callbacks[eventName].forEach(callback => {
                    try {
                        callback(data);
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –≤ callback:', error);
                    }
                });
            }
        },
        
        // –ú–µ—Ç–æ–¥—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        getPerformanceStats: function() {
            if (window.UnifiedFormulaSystem) {
                return window.UnifiedFormulaSystem.getStats();
            }
            return {};
        },
        
        validateAllFormulas: function() {
            console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—É–ª —á–µ—Ä–µ–∑ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É');
            return { valid: true, errors: [] };
        },
        
        getAllFormulas: function() {
            const editorData = this._getEditorData();
            if (!editorData) return [];
            
            const formulas = [];
            editorData.data.forEach((row, rowIndex) => {
                editorData.columns.forEach(column => {
                    const value = row[column.name];
                    if (value && String(value).startsWith('=')) {
                        formulas.push({
                            row: rowIndex,
                            field: column.name,
                            formula: value
                        });
                    }
                });
            });
            return formulas;
        }
    };
    
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ñ–æ—Ä–º—É–ª');
} else {
    console.log('‚ö†Ô∏è window.ExcelFormulaSystem —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Ç–æ–¥ calculateTotals
    if (typeof window.ExcelFormulaSystem.calculateTotals !== 'function') {
        console.log('üîß –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ calculateTotals');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ calculateTotals, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        window.ExcelFormulaSystem.calculateTotals = function() {
            const table = document.querySelector('#json-table-container-table');
            if (!table) {
                console.warn('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏—Ç–æ–≥–æ–≤');
                return null;
            }
            
         
            
            // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤
            let workTotal = 0;         // –ò—Ç–æ–≥ —Ä–∞–±–æ—Ç
            let clientWorkTotal = 0;    // –ò—Ç–æ–≥ —Ä–∞–±–æ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
            let materialsTotal = 0;     // –ò—Ç–æ–≥ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
            let grandTotal = 0;         // –û–±—â–∏–π –∏—Ç–æ–≥ (—Ä–∞–±–æ—Ç—ã + –º–∞—Ç–µ—Ä–∏–∞–ª—ã)
            
            const rows = table.querySelectorAll('tbody tr:not(.footer-row)');
            rows.forEach(row => {
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç—Ä–æ–∫–∏ (—Ä–∞–±–æ—Ç–∞ –∏–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª)
                const typeCell = row.querySelector('td[data-field="type"]');
                const isMaterial = typeCell && typeCell.textContent.trim().toLowerCase() === 'materials';
                
                const sumCell = row.querySelector('td[data-field="sum"]');
                const clientSumCell = row.querySelector('td[data-field="client_sum"]');
                
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≥—Ä—É–ø–ø –∏ –∏—Ç–æ–≥–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
                if (row.classList.contains('group-header') || row.classList.contains('total-row')) {
                    return;
                }
                
                if (sumCell && sumCell.textContent) {
                    const sum = parseFloat(sumCell.textContent.replace(/[^\d.-]/g, '')) || 0;
                    if (!isMaterial) {
                        workTotal += sum;
                    }
                }
                
                if (clientSumCell && clientSumCell.textContent) {
                    const clientSum = parseFloat(clientSumCell.textContent.replace(/[^\d.-]/g, '')) || 0;
                    if (isMaterial) {
                        materialsTotal += clientSum;
                    } else {
                        clientWorkTotal += clientSum;
                    }
                }
            });
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –∏—Ç–æ–≥
            grandTotal = clientWorkTotal + materialsTotal;
            
          
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∏—Ç–æ–≥–æ–≤
            const footerRows = Array.from(table.querySelectorAll('tr.footer-row, tr.grand-total-row'));
            if (footerRows.length === 0) {
                // –ï—Å–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –Ω–µ—Ç, –∏—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É
                const allRows = Array.from(table.querySelectorAll('tbody tr'));
                footerRows.push(...allRows.filter(row => {
                    const nameCell = row.querySelector('td[data-field="name"], td:first-child');
                    return nameCell && nameCell.textContent.toLowerCase().includes('–∏—Ç–æ–≥');
                }));
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏—Ç–æ–≥–æ–≤
            footerRows.forEach(row => {
                const isGrandTotal = row.querySelector('td:first-child')?.textContent?.toLowerCase().includes('–æ–±—â–∏–π –∏—Ç–æ–≥');
                const footerSumCell = row.querySelector('td[data-field="sum"]') || row.cells[5];
                const footerClientSumCell = row.querySelector('td[data-field="client_sum"]') || row.cells[9];
                
                if (footerSumCell) {
                    footerSumCell.textContent = workTotal.toLocaleString('ru-RU');
                
                }
                
                if (footerClientSumCell) {
                    // –í –æ–±—â–µ–º –∏—Ç–æ–≥–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—É–º–º—É —Ä–∞–±–æ—Ç –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                    const value = isGrandTotal ? grandTotal : clientWorkTotal;
                    footerClientSumCell.textContent = value.toLocaleString('ru-RU');
                    
                    if (isGrandTotal) {
                     
                        // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –æ–±—â–µ–≥–æ –∏—Ç–æ–≥–∞ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è
                        row.style.backgroundColor = '#c3e6cb';
                        setTimeout(() => { row.style.backgroundColor = ''; }, 1000);
                    } else {
                      
                    }
                }
            });
            
            return { 
                sum: workTotal, 
                client_sum: clientWorkTotal, 
                materials_sum: materialsTotal, 
                grand_total: grandTotal 
            };
        };
    }
    
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ window.ExcelFormulaSystem –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ v5.0');
    
    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è window.ExcelFormulaSystem
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ window.ExcelFormulaSystem:', {
        exists: typeof window.ExcelFormulaSystem !== 'undefined',
        calculateTotals: typeof window.ExcelFormulaSystem?.calculateTotals,
        methods: window.ExcelFormulaSystem ? Object.keys(window.ExcelFormulaSystem) : 'N/A'
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    if (typeof window.UnifiedFormulaSystem !== 'undefined') {
        console.log('‚úÖ –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ñ–æ—Ä–º—É–ª –¥–æ—Å—Ç—É–ø–Ω–∞');
    } else {
        console.warn('‚ö†Ô∏è –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ñ–æ—Ä–º—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Handsontable (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    let handsontableInitialized = false;
    
    function waitForHandsontable() {
        if (typeof window.hot !== 'undefined' && window.hot) {
            console.log('üìä Handsontable –æ–±–Ω–∞—Ä—É–∂–µ–Ω - –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é');
            handsontableInitialized = true;
            
            // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Handsontable
            window.hot.addHook('afterChange', function(changes, source) {
                if (source !== 'loadData' && changes && changes.length > 0) {
                    console.log('üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ Handsontable - –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ—Å—á–µ—Ç–∞');
                    window.ExcelFormulaSystem.recalculateAll();
                }
            });
        } else if (!handsontableInitialized) {
            setTimeout(waitForHandsontable, 100);
        }
    }
    
    waitForHandsontable();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è JSON Table Editor
    document.addEventListener('handsontable-ready', function() {
        console.log('üìä –°–æ–±—ã—Ç–∏–µ handsontable-ready –ø–æ–ª—É—á–µ–Ω–æ');
        waitForHandsontable();
    });
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –∏—Ç–æ–≥–æ–≤
    const observer = new MutationObserver(function(mutations) {
        let shouldRecalculate = false;
        
        mutations.forEach(function(mutation) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —è—á–µ–π–∫–∞—Ö —Å –¥–∞–Ω–Ω—ã–º–∏
            if (mutation.type === 'childList' || mutation.type === 'characterData') {
                const target = mutation.target;
                if (target.closest && target.closest('#json-table-container-table')) {
                    const cell = target.closest('td[data-field]');
                    if (cell) {
                        const field = cell.getAttribute('data-field');
                        // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç
                        if (['quantity', 'price', 'sum', 'markup', 'discount', 'client_price', 'client_sum'].includes(field)) {
                            shouldRecalculate = true;
                        }
                    }
                }
            }
        });
        
        if (shouldRecalculate) {
          
            setTimeout(() => {
                if (window.ExcelFormulaSystem && typeof window.ExcelFormulaSystem.calculateTotals === 'function') {
                    window.ExcelFormulaSystem.calculateTotals();
                } else {
                    console.error('‚ùå window.ExcelFormulaSystem.calculateTotals –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ MutationObserver!', window.ExcelFormulaSystem);
                }
            }, 100);
        }
    });
    
    // –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const tableContainer = document.querySelector('#json-table-container-wrapper');
    if (tableContainer) {
        observer.observe(tableContainer, {
            childList: true,
            subtree: true,
            characterData: true
        });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —è—á–µ–µ–∫ —Ç–∞–±–ª–∏—Ü—ã
    document.addEventListener('click', function(e) {
        const cell = e.target.closest('td[data-field]');
        if (cell && cell.classList.contains('editable')) {
            // –ü—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—É—é —è—á–µ–π–∫—É –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            cell.addEventListener('blur', function() {
                const field = this.getAttribute('data-field');
                if (['quantity', 'price', 'sum', 'markup', 'discount', 'client_price', 'client_sum'].includes(field)) {
                    console.log('üîÑ –ü–µ—Ä–µ—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤ –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —è—á–µ–π–∫–∏:', field);
                    setTimeout(() => {
                        if (window.ExcelFormulaSystem && typeof window.ExcelFormulaSystem.calculateTotals === 'function') {
                            window.ExcelFormulaSystem.calculateTotals();
                        } else {
                            console.error('‚ùå window.ExcelFormulaSystem.calculateTotals –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ blur handler!', window.ExcelFormulaSystem);
                        }
                    }, 50);
                }
            }, { once: true });
        }
    });
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    setTimeout(() => {
        console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏');
        if (window.ExcelFormulaSystem && typeof window.ExcelFormulaSystem.calculateTotals === 'function') {
            window.ExcelFormulaSystem.calculateTotals();
        } else {
            console.error('‚ùå window.ExcelFormulaSystem.calculateTotals –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!', window.ExcelFormulaSystem);
        }
    }, 2000);
    
    // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.addEventListener('load', function() {
        setTimeout(() => {
            console.log('üîÑ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤ –ø–æ—Å–ª–µ window.load');
            if (window.ExcelFormulaSystem && typeof window.ExcelFormulaSystem.calculateTotals === 'function') {
                window.ExcelFormulaSystem.calculateTotals();
            } else {
                console.error('‚ùå window.ExcelFormulaSystem.calculateTotals –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ window.load!', window.ExcelFormulaSystem);
            }
        }, 1000);
    });
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –∏—Ç–æ–≥–æ–≤
    window.initTotalCalculation = function() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –∏—Ç–æ–≥–æ–≤');
        if (window.ExcelFormulaSystem && typeof window.ExcelFormulaSystem.calculateTotals === 'function') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
            const checkTableLoaded = () => {
                const table = document.querySelector('#json-table-container-table');
                const rows = table ? table.querySelectorAll('tbody tr') : [];
                
                if (table && rows.length > 0) {
                    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤');
                    window.ExcelFormulaSystem.calculateTotals();
                    return true;
                } else {
                    console.log('‚è≥ –¢–∞–±–ª–∏—Ü–∞ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...');
                    return false;
                }
            };
            
            // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
            let attempts = 0;
            const maxAttempts = 20;
            const interval = setInterval(() => {
                attempts++;
                if (checkTableLoaded() || attempts >= maxAttempts) {
                    clearInterval(interval);
                    if (attempts >= maxAttempts) {
                        console.warn('‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
                    }
                }
            }, 500);
            
            return true;
        }
        return false;
    };
    
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    window.recalculateTotals = function() {
        if (window.ExcelFormulaSystem && typeof window.ExcelFormulaSystem.calculateTotals === 'function') {
            return window.ExcelFormulaSystem.calculateTotals();
        } else {
            console.error('‚ùå window.ExcelFormulaSystem.calculateTotals –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ recalculateTotals!', window.ExcelFormulaSystem);
            return null;
        }
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    window.forceUpdateTotals = function(testSum = 100000, testClientSum = 120000) {
        console.log('üõ†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏');
        
        // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É –∏—Ç–æ–≥–æ–≤
        const allRows = document.querySelectorAll('#json-table-container-table tbody tr');
        let targetRow = null;
        
        // –ò—â–µ–º –ø–æ –∫–ª–∞—Å—Å—É
        targetRow = document.querySelector('tr.footer-row');
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—â–µ–º –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        if (!targetRow) {
            for (let row of allRows) {
                const nameCell = row.querySelector('td[data-field="name"]');
                if (nameCell && nameCell.textContent.toUpperCase().includes('–û–ë–©–ò–ô –ò–¢–û–ì')) {
                    targetRow = row;
                    break;
                }
            }
        }
        
        // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É
        if (!targetRow && allRows.length > 0) {
            targetRow = allRows[allRows.length - 1];
        }
        
        if (targetRow) {
            console.log('üéØ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', targetRow);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —è—á–µ–π–∫–∏: "–°—Ç–æ–∏–º–æ—Å—Ç—å" –∏ "–°—É–º–º–∞ –∫–ª–∏–µ–Ω—Ç–∞"
            const sumCell = targetRow.querySelector('[data-field="sum"]') || targetRow.cells[5];
            const clientSumCell = targetRow.querySelector('[data-field="client_sum"]') || targetRow.cells[9];
            
            if (sumCell) {
                sumCell.textContent = testSum.toLocaleString('ru-RU');
                sumCell.style.backgroundColor = '#28a745';
                sumCell.style.color = 'white';
                console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —è—á–µ–π–∫–∞ "–°—Ç–æ–∏–º–æ—Å—Ç—å":', testSum);
            }
            
            if (clientSumCell) {
                clientSumCell.textContent = testClientSum.toLocaleString('ru-RU');
                clientSumCell.style.backgroundColor = '#28a745';
                clientSumCell.style.color = 'white';
                console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —è—á–µ–π–∫–∞ "–°—É–º–º–∞ –∫–ª–∏–µ–Ω—Ç–∞":', testClientSum);
            }
            
            // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                if (sumCell) {
                    sumCell.style.backgroundColor = '';
                    sumCell.style.color = '';
                }
                if (clientSumCell) {
                    clientSumCell.style.backgroundColor = '';
                    clientSumCell.style.color = '';
                }
            }, 2000);
            
            return { success: true, row: targetRow, sumCell, clientSumCell };
        } else {
            console.error('‚ùå –°—Ç—Ä–æ–∫–∞ –∏—Ç–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
            return { success: false };
        }
    };
    
    // –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    window.debugEstimate = {
        checkTableExists: function() {
            const table = document.querySelector('#json-table-container-table');
            console.log('üîç –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞:', !!table);
            if (table) {
                const rows = table.querySelectorAll('tbody tr');
                const footerRows = table.querySelectorAll('tr.footer-row');
                console.log('üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫:', rows.length);
                console.log('üéØ –°—Ç—Ä–æ–∫ –∏—Ç–æ–≥–æ–≤:', footerRows.length);
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                console.log('üîç –í—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ:');
                rows.forEach((row, index) => {
                    const nameCell = row.querySelector('td[data-field="name"]');
                    const name = nameCell ? nameCell.textContent.trim() : '–ë–ï–ó –ò–ú–ï–ù–ò';
                    console.log(`  ${index + 1}: "${name}" (–∫–ª–∞—Å—Å—ã: ${row.className})`);
                });
                
                return { table, rows, footerRows };
            }
            return null;
        },
        
        getTableData: function() {
            if (window.ExcelFormulaSystem) {
                const data = window.ExcelFormulaSystem._extractDataFromTable(document.querySelector('#json-table-container-table'));
                console.log('üìã –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:', data);
                return data;
            }
            return null;
        },
        
        testCalculation: function() {
            console.log('üßÆ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞...');
            if (window.ExcelFormulaSystem) {
                const totals = window.ExcelFormulaSystem.calculateTotals();
                console.log('üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞:', totals);
                return totals;
            }
            return null;
        },
        
        checkFooterCells: function() {
            console.log('üîç –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫ –∏—Ç–æ–≥–æ–≤...');
            
            // –ü–æ–∏—Å–∫ –ø–æ –∫–ª–∞—Å—Å—É
            let footerRows = document.querySelectorAll('tr.footer-row');
            console.log('üîç –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É tr.footer-row:', footerRows.length);
            
            // –ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
            const allRows = document.querySelectorAll('#json-table-container-table tbody tr');
            const contentBasedRows = Array.from(allRows).filter(row => {
                const nameCell = row.querySelector('td[data-field="name"]');
                const text = nameCell ? nameCell.textContent.trim().toUpperCase() : '';
                return text.includes('–û–ë–©–ò–ô –ò–¢–û–ì') || text.includes('–ò–¢–û–ì') || text.includes('TOTAL');
            });
            console.log('üîç –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É:', contentBasedRows.length);
            
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            const allFooterRows = new Set([...footerRows, ...contentBasedRows]);
            
            console.log('üîç –ò—Ç–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –∏—Ç–æ–≥–æ–≤:', allFooterRows.size);
            
            allFooterRows.forEach((row, index) => {
                console.log(`üìä –°—Ç—Ä–æ–∫–∞ –∏—Ç–æ–≥–æ–≤ ${index + 1}:`);
                const sumCell = row.querySelector('[data-field="sum"]') || row.cells[5];
                const clientSumCell = row.querySelector('[data-field="client_sum"]') || row.cells[9];
                const clientPriceCell = row.querySelector('[data-field="client_price"]') || row.cells[8];
                
                console.log('  - –Ø—á–µ–π–∫–∞ —Å—É–º–º—ã:', sumCell ? `"${sumCell.textContent}"` : '–ù–ï –ù–ê–ô–î–ï–ù–ê');
                console.log('  - –Ø—á–µ–π–∫–∞ —Å—É–º–º—ã –∫–ª–∏–µ–Ω—Ç–∞:', clientSumCell ? `"${clientSumCell.textContent}"` : '–ù–ï –ù–ê–ô–î–ï–ù–ê');
                console.log('  - –Ø—á–µ–π–∫–∞ —Ü–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç–∞:', clientPriceCell ? `"${clientPriceCell.textContent}"` : '–ù–ï –ù–ê–ô–î–ï–ù–ê');
            });
            
            return Array.from(allFooterRows);
        },
        
        manualUpdate: function(sum = 100000, clientSum = 120000) {
            console.log('‚úèÔ∏è –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞...');
            return window.forceUpdateTotals(sum, clientSum);
        },
        
        findAllCells: function() {
            console.log('üîç –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —è—á–µ–µ–∫ —Å data-field...');
            const cells = document.querySelectorAll('td[data-field]');
            const fieldCounts = {};
            
            cells.forEach(cell => {
                const field = cell.getAttribute('data-field');
                fieldCounts[field] = (fieldCounts[field] || 0) + 1;
            });
            
            console.log('üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—è:', fieldCounts);
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –∏—â–µ–º —è—á–µ–π–∫–∏ —Å—É–º–º
            const sumCells = document.querySelectorAll('td[data-field="sum"]');
            const clientSumCells = document.querySelectorAll('td[data-field="client_sum"]');
            
            console.log('üí∞ –Ø—á–µ–π–∫–∏ —Å—Ç–æ–ª–±—Ü–∞ "–°—Ç–æ–∏–º–æ—Å—Ç—å":', sumCells.length);
            console.log('üí∞ –Ø—á–µ–π–∫–∏ —Å—Ç–æ–ª–±—Ü–∞ "–°—É–º–º–∞ –∫–ª–∏–µ–Ω—Ç–∞":', clientSumCells.length);
            
            return { fieldCounts, sumCells, clientSumCells };
        },
        
        calculateCorrectTotals: function() {
            const table = document.querySelector('#json-table-container-table');
            if (!table) {
                console.warn('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏—Ç–æ–≥–æ–≤');
                return { sum: 0, client_sum: 0 };
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            const rows = Array.from(table.querySelectorAll('tbody tr:not(.footer-row):not(.group-header)'));
            
            let totalSum = 0;
            let totalClientSum = 0;
            let materialsTotalSum = 0;
            let materialsTotalClientSum = 0;
            
            console.log(`üßÆ –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤ –¥–ª—è ${rows.length} —Å—Ç—Ä–æ–∫...`);
            
            rows.forEach((row, rowIndex) => {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∏—Ç–æ–≥–æ–≤ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                if (row.classList.contains('footer-row') || 
                    row.classList.contains('group-header') || 
                    row.classList.contains('total-row')) {
                    return;
                }
                
                // –ü–æ–ª—É—á–∞–µ–º —è—á–µ–π–∫–∏ —Å –Ω—É–∂–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                const nameCell = row.querySelector('[data-field="name"]');
                const quantityCell = row.querySelector('[data-field="quantity"]');
                const priceCell = row.querySelector('[data-field="price"]');
                const sumCell = row.querySelector('[data-field="sum"]');
                const markupCell = row.querySelector('[data-field="markup"]');
                const discountCell = row.querySelector('[data-field="discount"]');
                const clientPriceCell = row.querySelector('[data-field="client_price"]');
                const clientSumCell = row.querySelector('[data-field="client_sum"]');
                const typeCell = row.querySelector('[data-field="type"]');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —è—á–µ–π–∫–∏ –Ω–∞–π–¥–µ–Ω—ã
                if (!nameCell || !quantityCell || !priceCell) {
                    return;
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
                const name = nameCell.textContent.trim();
                
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∏—Ç–æ–≥–æ–≤
                if (name.toLowerCase().includes('–∏—Ç–æ–≥') || name.toLowerCase().includes('–≤—Å–µ–≥–æ')) {
                    return;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ –ø—É—Å—Ç–∞
                if (!name || name === '') {
                    return;
                }
                
                // –ü–∞—Ä—Å–∏–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                const quantity = parseFloat(quantityCell.textContent.replace(/[^\d.,]/g, '').replace(',', '.')) || 0;
                const price = parseFloat(priceCell.textContent.replace(/[^\d.,]/g, '').replace(',', '.')) || 0;
                const markup = markupCell ? (parseFloat(markupCell.textContent.replace(/[^\d.,]/g, '').replace(',', '.')) || 0) : 0;
                const discount = discountCell ? (parseFloat(discountCell.textContent.replace(/[^\d.,]/g, '').replace(',', '.')) || 0) : 0;
                
                // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
                const sum = price * quantity;
                
                // –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞ —Å —É—á–µ—Ç–æ–º –Ω–∞—Ü–µ–Ω–∫–∏ –∏ —Å–∫–∏–¥–∫–∏
                let clientPrice = price;
                if (markup > 0) {
                    clientPrice *= (1 + markup / 100);
                }
                if (discount > 0) {
                    clientPrice *= (1 - discount / 100);
                }
                
                // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
                const clientSum = clientPrice * quantity;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å—Ç—Ä–æ–∫–∏ (—Ä–∞–±–æ—Ç—ã –∏–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã)
                const isMaterial = typeCell && typeCell.textContent.trim().toLowerCase().includes('material');
                
                // –°—É–º–º–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
                if (isMaterial) {
                    materialsTotalSum += sum;
                    materialsTotalClientSum += clientSum;
                } else {
                    totalSum += sum;
                    totalClientSum += clientSum;
                }
                
                // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                console.log(`–°—Ç—Ä–æ–∫–∞ ${rowIndex + 1} "${name}": –∫–æ–ª-–≤–æ=${quantity}, —Ü–µ–Ω–∞=${price}, —Å—É–º–º–∞=${sum}, –Ω–∞—Ü–µ–Ω–∫–∞=${markup}%, —Å–∫–∏–¥–∫–∞=${discount}%, —Ü–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞=${clientPrice}, —Å—É–º–º–∞ –∫–ª–∏–µ–Ω—Ç–∞=${clientSum}`);
            });
            
            // –û–±—â–∏–µ –∏—Ç–æ–≥–∏
            const grandTotalSum = totalSum + materialsTotalSum;
            const grandTotalClientSum = totalClientSum + materialsTotalClientSum;
            
            console.log('üìä –ò—Ç–æ–≥–∏ —Ä–∞—Å—á–µ—Ç–∞:');
            console.log('  - –†–∞–±–æ—Ç—ã (–°—Ç–æ–∏–º–æ—Å—Ç—å):', totalSum);
            console.log('  - –†–∞–±–æ—Ç—ã (–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞):', totalClientSum);
            console.log('  - –ú–∞—Ç–µ—Ä–∏–∞–ª—ã (–°—Ç–æ–∏–º–æ—Å—Ç—å):', materialsTotalSum);
            console.log('  - –ú–∞—Ç–µ—Ä–∏–∞–ª—ã (–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞):', materialsTotalClientSum);
            console.log('  - –û–ë–©–ò–ô –ò–¢–û–ì (–°—Ç–æ–∏–º–æ—Å—Ç—å):', grandTotalSum);
            console.log('  - –û–ë–©–ò–ô –ò–¢–û–ì (–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞):', grandTotalClientSum);
            
            return {
                sum: totalSum,
                client_sum: totalClientSum,
                materials_sum: materialsTotalSum,
                materials_client_sum: materialsTotalClientSum,
                grand_total_sum: grandTotalSum,
                grand_total_client_sum: grandTotalClientSum
            };
        }
    };
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å—Ä–∞–∑—É
    window.initTotalCalculation();
    
    // –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ —Å–æ–±—ã—Ç–∏–µ formula-system-ready
    document.addEventListener('formula-system-ready', function(event) {
        console.log('üßÆ –°–∏—Å—Ç–µ–º–∞ —Ñ–æ—Ä–º—É–ª –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ä–º—É–ª
        window.initTotalCalculation();
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –∏—Ç–æ–≥–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —è—á–µ–µ–∫ —Ç–∞–±–ª–∏—Ü—ã
    document.addEventListener('cell-value-changed', function(event) {
        console.log('üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —è—á–µ–π–∫–∏:', event.detail);
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        setTimeout(() => window.forceUpdateTotals(), 300);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
    ['row-added', 'row-removed', 'formula-calculated', 'table-rendered'].forEach(eventName => {
        document.addEventListener(eventName, function() {
            console.log(`üìä –°–æ–±—ã—Ç–∏–µ ${eventName} - –∑–∞–ø—É—Å–∫ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –∏—Ç–æ–≥–æ–≤`);
            setTimeout(() => window.forceUpdateTotals(), 300);
        });
    });
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    document.addEventListener('submit', function(e) {
        if (e.target.tagName === 'FORM') {
            console.log('üíæ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ä–º—ã');
            window.ExcelFormulaSystem.prepareDataForSave();
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            window.forceUpdateTotals();
        }
    });
    
    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–º–µ—Ç—ã –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
     */
    function setupAutoSaveEstimate() {
        // –ü–æ–ª—É—á–∞–µ–º ID —Å–º–µ—Ç—ã –∏–∑ URL
        const getEstimateId = () => {
            const path = window.location.pathname;
            const matches = path.match(/\/(?:partner\/)?estimates\/(\d+)/);
            return matches ? matches[1] : null;
        };
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const estimateId = getEstimateId();
        if (!estimateId) {
            console.warn('‚ö†Ô∏è ID —Å–º–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ');
            return;
        }
        
        console.log(`üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è —Å–º–µ—Ç—ã #${estimateId}`);
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ CSRF-—Ç–æ–∫–µ–Ω–∞
        const getCsrfToken = () => {
            const token = document.querySelector('meta[name="csrf-token"]');
            return token ? token.getAttribute('content') : '';
        };
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–º–µ—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const saveEstimateData = (data) => {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            const now = new Date();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫ –¥–∞–Ω–Ω—ã–º —Å–º–µ—Ç—ã
            const dataToSave = {
                ...data,
                meta: {
                    ...(data.meta || {}),
                    estimate_id: estimateId,
                    updated_at: now.toISOString(),
                    version: '2.0'
                }
            };
            
            console.log(`üîÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–º–µ—Ç—ã #${estimateId}...`);
            
            return fetch(`/partner/estimates/${estimateId}/save-json`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': getCsrfToken(),
                    'X-Requested-With': 'XMLHttpRequest',
                    'Accept': 'application/json'
                },
                body: JSON.stringify(dataToSave)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
                }
                return response.json();
            })
            .then(result => {
                if (result.success) {
                    console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ —Å–º–µ—Ç—ã #${estimateId} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã`);
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
                    if (typeof showToast === 'function') {
                        showToast('success', '–°–º–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
                    }
                    return true;
                } else {
                    throw new Error(result.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
                }
            })
            .catch(error => {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–º–µ—Ç—ã #${estimateId}:`, error);
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
                if (typeof showToast === 'function') {
                    showToast('error', `–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.message}`);
                }
                return false;
            });
        };
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        const getEditorData = () => {
            if (window.jsonTableEditor) {
                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JsonTableEditor
                return {
                    sheets: window.jsonTableEditor.sheets,
                    currentSheet: window.jsonTableEditor.currentSheetIndex,
                    meta: window.jsonTableEditor.meta || {}
                };
            } else {
                // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ DOM
                const table = document.querySelector('#json-table-container-table');
                if (!table) return null;
                
                // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã DOM
                const extractDataFromTable = () => {
                    const rows = Array.from(table.querySelectorAll('tbody tr'));
                    const data = [];
                    
                    rows.forEach(row => {
                        if (row.classList.contains('footer-row')) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
                        
                        const cells = Array.from(row.querySelectorAll('td[data-field]'));
                        const rowData = {};
                        
                        cells.forEach(cell => {
                            const field = cell.getAttribute('data-field');
                            const value = cell.textContent.trim();
                            rowData[field] = value;
                        });
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                        if (!rowData._id) {
                            rowData._id = 'row_' + Math.random().toString(36).substr(2, 9);
                        }
                        
                        data.push(rowData);
                    });
                    
                    return data;
                };
                
                return {
                    sheets: [
                        {
                            name: '–û—Å–Ω–æ–≤–Ω–æ–π',
                            data: extractDataFromTable()
                        }
                    ],
                    currentSheet: 0,
                    meta: {
                        estimate_id: estimateId,
                        updated_at: new Date().toISOString(),
                        version: '2.0'
                    }
                };
            }
        };
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        let autoSaveTimeout;
        const AUTOSAVE_INTERVAL = 60000; // 1 –º–∏–Ω—É—Ç–∞
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const scheduleAutoSave = () => {
            clearTimeout(autoSaveTimeout);
            autoSaveTimeout = setTimeout(() => {
                const data = getEditorData();
                if (data) {
                    saveEstimateData(data)
                        .then(() => scheduleAutoSave());
                } else {
                    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
                    scheduleAutoSave();
                }
            }, AUTOSAVE_INTERVAL);
        };
        
        // –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        scheduleAutoSave();
        
        // –ó–∞–ø—É—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ
        ['cell-value-changed', 'row-added', 'row-removed'].forEach(eventName => {
            document.addEventListener(eventName, () => {
                // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
                scheduleAutoSave();
            });
        });
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Ctrl+S
        document.addEventListener('keydown', function(e) {
            if ((e.ctrlKey || e.metaKey) && e.key === 's') {
                e.preventDefault();
                const data = getEditorData();
                if (data) {
                    saveEstimateData(data);
                }
            }
        });
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        setTimeout(() => {
            const toolbar = document.querySelector('.json-table-toolbar');
            if (toolbar && !document.getElementById('save-estimate-btn')) {
                const saveButton = document.createElement('button');
                saveButton.id = 'save-estimate-btn';
                saveButton.className = 'btn btn-sm btn-success ms-2';
                saveButton.innerHTML = '<i class="bi bi-save"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–º–µ—Ç—É';
                saveButton.addEventListener('click', function(e) {
                    e.preventDefault();
                    const data = getEditorData();
                    if (data) {
                        saveEstimateData(data);
                    } else {
                        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
                    }
                });
                
                toolbar.appendChild(saveButton);
            }
        }, 1500);
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.addEventListener('DOMContentLoaded', setupAutoSaveEstimate);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –∏—Ç–æ–≥–∏" –≤ –Ω–∏–∂–Ω–∏–π –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –µ—ë –µ—â–µ –Ω–µ—Ç
    setTimeout(() => {
        const toolbar = document.querySelector('.json-table-toolbar');
        if (toolbar && !document.getElementById('recalculate-totals-btn')) {
            const recalcButton = document.createElement('button');
            recalcButton.id = 'recalculate-totals-btn';
            recalcButton.className = 'btn btn-sm btn-primary ms-2';
            recalcButton.innerHTML = '<i class="bi bi-calculator"></i> –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –∏—Ç–æ–≥–∏';
            recalcButton.addEventListener('click', function(e) {
                e.preventDefault();
                window.forceUpdateTotals();
            });
            
            toolbar.appendChild(recalcButton);
        }
    }, 1000);

    console.log('‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Ñ–æ—Ä–º—É–ª v5.0 —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
});
</script>
<?php /**PATH C:\OSPanel\domains\remont\resources\views/partner/estimates/partials/auto-recalculate-script-v2.blade.php ENDPATH**/ ?>